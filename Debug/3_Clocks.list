
3_Clocks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004954  08004954  00005954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f8  080049f8  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a00  08004a00  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a00  08004a00  00005a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a04  08004a04  00005a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08004a70  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004a70  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c947  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1a  00000000  00000000  000129df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00014800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000862  00000000  00000000  00015308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027467  00000000  00000000  00015b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d441  00000000  00000000  0003cfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef742  00000000  00000000  0004a412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000337c  00000000  00000000  00139b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0013cf14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800493c 	.word	0x0800493c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800493c 	.word	0x0800493c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Funkcja do wysylania danych przez UART przez printf:
int __io_putchar(int ch) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	if(ch == '\n') {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d109      	bne.n	8000582 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 800056e:	230d      	movs	r3, #13
 8000570:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000572:	f107 010f 	add.w	r1, r7, #15
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2201      	movs	r2, #1
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <__io_putchar+0x3c>)
 800057e:	f002 fd55 	bl	800302c <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000582:	1d39      	adds	r1, r7, #4
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	2201      	movs	r2, #1
 800058a:	4804      	ldr	r0, [pc, #16]	@ (800059c <__io_putchar+0x3c>)
 800058c:	f002 fd4e 	bl	800302c <HAL_UART_Transmit>
	return 1;
 8000590:	2301      	movs	r3, #1
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000a8 	.word	0x200000a8

080005a0 <is_button_pressed>:
//Funkcja do obsługi przycisku:
bool is_button_pressed(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 80005a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a8:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <is_button_pressed+0x20>)
 80005aa:	f000 fe5b 	bl	8001264 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d101      	bne.n	80005b8 <is_button_pressed+0x18>
		return true;
 80005b4:	2301      	movs	r3, #1
 80005b6:	e000      	b.n	80005ba <is_button_pressed+0x1a>
	}
	else {
		return false;
 80005b8:	2300      	movs	r3, #0
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	48000800 	.word	0x48000800

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b090      	sub	sp, #64	@ 0x40
 80005c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb22 	bl	8000c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f85f 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f90b 	bl	80007ec <MX_GPIO_Init>
  MX_RTC_Init();
 80005d6:	f000 f8b1 	bl	800073c <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f8d7 	bl	800078c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_DateTypeDef today;
  today.Year = 24;
 80005de:	2318      	movs	r3, #24
 80005e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  today.Month = 7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  today.Date = 13;
 80005ea:	230d      	movs	r3, #13
 80005ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  today.WeekDay = RTC_WEEKDAY_SATURDAY;
 80005f0:	2306      	movs	r3, #6
 80005f2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  HAL_RTC_SetDate(&hrtc, &today, RTC_FORMAT_BIN);
 80005f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	4822      	ldr	r0, [pc, #136]	@ (8000688 <main+0xc4>)
 8000600:	f002 fb21 	bl	8002c46 <HAL_RTC_SetDate>
  while (1)
  {
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;

	  if(is_button_pressed()) {
 8000604:	f7ff ffcc 	bl	80005a0 <is_button_pressed>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d018      	beq.n	8000640 <main+0x7c>
		  RTC_TimeTypeDef new_time = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
		  //Czekamy na zwolnienie przycisku:
		  while(is_button_pressed()) {}
 800061c:	bf00      	nop
 800061e:	f7ff ffbf 	bl	80005a0 <is_button_pressed>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1fa      	bne.n	800061e <main+0x5a>

		  new_time.Hours = 14;
 8000628:	230e      	movs	r3, #14
 800062a:	703b      	strb	r3, [r7, #0]
		  new_time.Minutes = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	707b      	strb	r3, [r7, #1]
		  new_time.Seconds = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70bb      	strb	r3, [r7, #2]
		  HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	4813      	ldr	r0, [pc, #76]	@ (8000688 <main+0xc4>)
 800063c:	f002 fa0a 	bl	8002a54 <HAL_RTC_SetTime>
	  }

	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	480f      	ldr	r0, [pc, #60]	@ (8000688 <main+0xc4>)
 800064a:	f002 faa0 	bl	8002b8e <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	480c      	ldr	r0, [pc, #48]	@ (8000688 <main+0xc4>)
 8000658:	f002 fb7c 	bl	8002d54 <HAL_RTC_GetDate>

	  printf("RTC: %04d-%02d-%02d, %02d:%02d:%02d\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	f503 61fa 	add.w	r1, r3, #2000	@ 0x7d0
 8000662:	7d7b      	ldrb	r3, [r7, #21]
 8000664:	461c      	mov	r4, r3
 8000666:	7dbb      	ldrb	r3, [r7, #22]
 8000668:	461d      	mov	r5, r3
 800066a:	7e3b      	ldrb	r3, [r7, #24]
 800066c:	7e7a      	ldrb	r2, [r7, #25]
 800066e:	7eb8      	ldrb	r0, [r7, #26]
 8000670:	9002      	str	r0, [sp, #8]
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	462b      	mov	r3, r5
 8000678:	4622      	mov	r2, r4
 800067a:	4804      	ldr	r0, [pc, #16]	@ (800068c <main+0xc8>)
 800067c:	f003 faf0 	bl	8003c60 <iprintf>
	  HAL_Delay(200);
 8000680:	20c8      	movs	r0, #200	@ 0xc8
 8000682:	f000 fb3b 	bl	8000cfc <HAL_Delay>
  {
 8000686:	e7bd      	b.n	8000604 <main+0x40>
 8000688:	20000084 	.word	0x20000084
 800068c:	08004954 	.word	0x08004954

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	@ 0x58
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2244      	movs	r2, #68	@ 0x44
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fb33 	bl	8003d0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006b6:	f000 fe23 	bl	8001300 <HAL_PWREx_ControlVoltageScaling>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c0:	f000 f8e2 	bl	8000888 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c4:	f000 fdfe 	bl	80012c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemClock_Config+0xa8>)
 80006ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000738 <SystemClock_Config+0xa8>)
 80006d0:	f023 0318 	bic.w	r3, r3, #24
 80006d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006d8:	2314      	movs	r3, #20
 80006da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e8:	2360      	movs	r3, #96	@ 0x60
 80006ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fe59 	bl	80013ac <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000700:	f000 f8c2 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fa21 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000728:	f000 f8ae 	bl	8000888 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800072c:	f001 ff28 	bl	8002580 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000730:	bf00      	nop
 8000732:	3758      	adds	r7, #88	@ 0x58
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000

0800073c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_RTC_Init+0x48>)
 8000742:	4a11      	ldr	r2, [pc, #68]	@ (8000788 <MX_RTC_Init+0x4c>)
 8000744:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_RTC_Init+0x48>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_RTC_Init+0x48>)
 800074e:	227f      	movs	r2, #127	@ 0x7f
 8000750:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_RTC_Init+0x48>)
 8000754:	22ff      	movs	r2, #255	@ 0xff
 8000756:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_RTC_Init+0x48>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_RTC_Init+0x48>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_RTC_Init+0x48>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_RTC_Init+0x48>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_RTC_Init+0x48>)
 8000772:	f002 f8e7 	bl	8002944 <HAL_RTC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800077c:	f000 f884 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000084 	.word	0x20000084
 8000788:	40002800 	.word	0x40002800

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	@ (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007d0:	f002 fbde 	bl	8002f90 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f855 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000a8 	.word	0x200000a8
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_GPIO_Init+0x94>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a1e      	ldr	r2, [pc, #120]	@ (8000880 <MX_GPIO_Init+0x94>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_GPIO_Init+0x94>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_GPIO_Init+0x94>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a18      	ldr	r2, [pc, #96]	@ (8000880 <MX_GPIO_Init+0x94>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_GPIO_Init+0x94>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083a:	f000 fd2b 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800083e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_GPIO_Init+0x98>)
 8000854:	f000 fb5c 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f000 fb4d 	bl	8000f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	48000800 	.word	0x48000800

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <HAL_MspInit+0x44>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <HAL_MspInit+0x44>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0a4      	sub	sp, #144	@ 0x90
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2288      	movs	r2, #136	@ 0x88
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fa0c 	bl	8003d0a <memset>
  if(hrtc->Instance==RTC)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <HAL_RTC_MspInit+0x5c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d118      	bne.n	800092e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fb4c 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800091a:	f7ff ffb5 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <HAL_RTC_MspInit+0x60>)
 8000920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000924:	4a05      	ldr	r2, [pc, #20]	@ (800093c <HAL_RTC_MspInit+0x60>)
 8000926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800092a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800092e:	bf00      	nop
 8000930:	3790      	adds	r7, #144	@ 0x90
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40002800 	.word	0x40002800
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ac      	sub	sp, #176	@ 0xb0
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2288      	movs	r2, #136	@ 0x88
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f003 f9d2 	bl	8003d0a <memset>
  if(huart->Instance==USART2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a21      	ldr	r2, [pc, #132]	@ (80009f0 <HAL_UART_MspInit+0xb0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d13b      	bne.n	80009e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000974:	2300      	movs	r3, #0
 8000976:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fb15 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000988:	f7ff ff7e 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <HAL_UART_MspInit+0xb4>)
 800098e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000990:	4a18      	ldr	r2, [pc, #96]	@ (80009f4 <HAL_UART_MspInit+0xb4>)
 8000992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000996:	6593      	str	r3, [r2, #88]	@ 0x58
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <HAL_UART_MspInit+0xb4>)
 800099a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <HAL_UART_MspInit+0xb4>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <HAL_UART_MspInit+0xb4>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b0:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <HAL_UART_MspInit+0xb4>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009bc:	230c      	movs	r3, #12
 80009be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d4:	2307      	movs	r3, #7
 80009d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e4:	f000 fa94 	bl	8000f10 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009e8:	bf00      	nop
 80009ea:	37b0      	adds	r7, #176	@ 0xb0
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 f935 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e00a      	b.n	8000a7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a68:	f3af 8000 	nop.w
 8000a6c:	4601      	mov	r1, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	60ba      	str	r2, [r7, #8]
 8000a74:	b2ca      	uxtb	r2, r1
 8000a76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dbf0      	blt.n	8000a68 <_read+0x12>
  }

  return len;
 8000a86:	687b      	ldr	r3, [r7, #4]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e009      	b.n	8000ab6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	60ba      	str	r2, [r7, #8]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fd58 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbf1      	blt.n	8000aa2 <_write+0x12>
  }
  return len;
 8000abe:	687b      	ldr	r3, [r7, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_close>:

int _close(int file)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af0:	605a      	str	r2, [r3, #4]
  return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_isatty>:

int _isatty(int file)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b08:	2301      	movs	r3, #1
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f003 f922 	bl	8003da8 <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20018000 	.word	0x20018000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	20000130 	.word	0x20000130
 8000b98:	20000288 	.word	0x20000288

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff ffea 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 f8e1 	bl	8003db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fce7 	bl	80005c4 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c04:	08004a08 	.word	0x08004a08
  ldr r2, =_sbss
 8000c08:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c0c:	20000284 	.word	0x20000284

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>

08000c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f943 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f80e 	bl	8000c44 <HAL_InitTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	e001      	b.n	8000c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c34:	f7ff fe2e 	bl	8000894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d023      	beq.n	8000ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_InitTick+0x70>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f941 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10f      	bne.n	8000c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d809      	bhi.n	8000c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f919 	bl	8000ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_InitTick+0x74>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e007      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e001      	b.n	8000ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000134 	.word	0x20000134

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000134 	.word	0x20000134

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff47 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff5c 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffb0 	bl	8000e64 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1e:	e17f      	b.n	8001220 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8171 	beq.w	800121a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d005      	beq.n	8000f50 <HAL_GPIO_Init+0x40>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d130      	bne.n	8000fb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f86:	2201      	movs	r2, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	f003 0201 	and.w	r2, r3, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d118      	bne.n	8000ff0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	6939      	ldr	r1, [r7, #16]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80ac 	beq.w	800121a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001240 <HAL_GPIO_Init+0x330>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001240 <HAL_GPIO_Init+0x330>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <HAL_GPIO_Init+0x330>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010da:	4a5a      	ldr	r2, [pc, #360]	@ (8001244 <HAL_GPIO_Init+0x334>)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x242>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4f      	ldr	r2, [pc, #316]	@ (8001248 <HAL_GPIO_Init+0x338>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x23e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4e      	ldr	r2, [pc, #312]	@ (800124c <HAL_GPIO_Init+0x33c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x23a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4d      	ldr	r2, [pc, #308]	@ (8001250 <HAL_GPIO_Init+0x340>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x236>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4c      	ldr	r2, [pc, #304]	@ (8001254 <HAL_GPIO_Init+0x344>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x232>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4b      	ldr	r2, [pc, #300]	@ (8001258 <HAL_GPIO_Init+0x348>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4a      	ldr	r2, [pc, #296]	@ (800125c <HAL_GPIO_Init+0x34c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x22a>
 8001136:	2306      	movs	r3, #6
 8001138:	e00c      	b.n	8001154 <HAL_GPIO_Init+0x244>
 800113a:	2307      	movs	r3, #7
 800113c:	e00a      	b.n	8001154 <HAL_GPIO_Init+0x244>
 800113e:	2305      	movs	r3, #5
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x244>
 8001142:	2304      	movs	r3, #4
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x244>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x244>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x244>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x244>
 8001152:	2300      	movs	r3, #0
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001164:	4937      	ldr	r1, [pc, #220]	@ (8001244 <HAL_GPIO_Init+0x334>)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001172:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <HAL_GPIO_Init+0x350>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001196:	4a32      	ldr	r2, [pc, #200]	@ (8001260 <HAL_GPIO_Init+0x350>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_GPIO_Init+0x350>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011c0:	4a27      	ldr	r2, [pc, #156]	@ (8001260 <HAL_GPIO_Init+0x350>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <HAL_GPIO_Init+0x350>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <HAL_GPIO_Init+0x350>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <HAL_GPIO_Init+0x350>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001214:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <HAL_GPIO_Init+0x350>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	f47f ae78 	bne.w	8000f20 <HAL_GPIO_Init+0x10>
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000800 	.word	0x48000800
 8001250:	48000c00 	.word	0x48000c00
 8001254:	48001000 	.word	0x48001000
 8001258:	48001400 	.word	0x48001400
 800125c:	48001800 	.word	0x48001800
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000

080012e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800130e:	d130      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800131c:	d038      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001326:	4a1e      	ldr	r2, [pc, #120]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2232      	movs	r2, #50	@ 0x32
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001344:	e002      	b.n	800134c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001358:	d102      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f2      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800136c:	d110      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e00f      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137e:	d007      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001388:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800138e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40007000 	.word	0x40007000
 80013a4:	20000000 	.word	0x20000000
 80013a8:	431bde83 	.word	0x431bde83

080013ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e3ca      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013be:	4b97      	ldr	r3, [pc, #604]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c8:	4b94      	ldr	r3, [pc, #592]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80e4 	beq.w	80015a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4a>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	f040 808b 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 8087 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f6:	4b89      	ldr	r3, [pc, #548]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x62>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e3a2      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b82      	ldr	r3, [pc, #520]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_RCC_OscConfig+0x7c>
 800141e:	4b7f      	ldr	r3, [pc, #508]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x88>
 8001428:	4b7c      	ldr	r3, [pc, #496]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800142a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001434:	4293      	cmp	r3, r2
 8001436:	d223      	bcs.n	8001480 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd55 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e383      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b73      	ldr	r3, [pc, #460]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a72      	ldr	r2, [pc, #456]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b70      	ldr	r3, [pc, #448]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	496d      	ldr	r1, [pc, #436]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b6c      	ldr	r3, [pc, #432]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	4968      	ldr	r1, [pc, #416]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e025      	b.n	80014cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4b66      	ldr	r3, [pc, #408]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a65      	ldr	r2, [pc, #404]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b63      	ldr	r3, [pc, #396]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4960      	ldr	r1, [pc, #384]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149e:	4b5f      	ldr	r3, [pc, #380]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	495b      	ldr	r1, [pc, #364]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fd15 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e343      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014cc:	f000 fc4a 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b52      	ldr	r3, [pc, #328]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	4950      	ldr	r1, [pc, #320]	@ (8001620 <HAL_RCC_OscConfig+0x274>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <HAL_RCC_OscConfig+0x278>)
 80014ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001628 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fba7 	bl	8000c44 <HAL_InitTick>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d052      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	e327      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d032      	beq.n	8001572 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150c:	4b43      	ldr	r3, [pc, #268]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a42      	ldr	r2, [pc, #264]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001518:	f7ff fbe4 	bl	8000ce4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fbe0 	bl	8000ce4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e310      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a36      	ldr	r2, [pc, #216]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4931      	ldr	r1, [pc, #196]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155c:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	492c      	ldr	r1, [pc, #176]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e01a      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001572:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a29      	ldr	r2, [pc, #164]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800157e:	f7ff fbb1 	bl	8000ce4 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001586:	f7ff fbad 	bl	8000ce4 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e2dd      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x1da>
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d074      	beq.n	800169e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x21a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d10e      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d10b      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d064      	beq.n	800169c <HAL_RCC_OscConfig+0x2f0>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d160      	bne.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2ba      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x24a>
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e026      	b.n	8001644 <HAL_RCC_OscConfig+0x298>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015fe:	d115      	bne.n	800162c <HAL_RCC_OscConfig+0x280>
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001606:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a02      	ldr	r2, [pc, #8]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x298>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	0800497c 	.word	0x0800497c
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004
 800162c:	4ba0      	ldr	r3, [pc, #640]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a9f      	ldr	r2, [pc, #636]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b9d      	ldr	r3, [pc, #628]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9c      	ldr	r2, [pc, #624]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb4a 	bl	8000ce4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb46 	bl	8000ce4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e276      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	4b92      	ldr	r3, [pc, #584]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x2a8>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fb36 	bl	8000ce4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fb32 	bl	8000ce4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	@ 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e262      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	4b88      	ldr	r3, [pc, #544]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x2d0>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d060      	beq.n	800176c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x310>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d119      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d116      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	4b7c      	ldr	r3, [pc, #496]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x328>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e23f      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b76      	ldr	r3, [pc, #472]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4973      	ldr	r1, [pc, #460]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e8:	e040      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d023      	beq.n	800173a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b6f      	ldr	r3, [pc, #444]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff faf1 	bl	8000ce4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff faed 	bl	8000ce4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e21d      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	4b65      	ldr	r3, [pc, #404]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b62      	ldr	r3, [pc, #392]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	495f      	ldr	r1, [pc, #380]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e018      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b5d      	ldr	r3, [pc, #372]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a5c      	ldr	r2, [pc, #368]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff facd 	bl	8000ce4 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fac9 	bl	8000ce4 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1f9      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01c      	beq.n	80017ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001780:	4b4b      	ldr	r3, [pc, #300]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	4a4a      	ldr	r2, [pc, #296]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff faa8 	bl	8000ce4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff faa4 	bl	8000ce4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1d4      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017aa:	4b41      	ldr	r3, [pc, #260]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x3ec>
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c0:	4a3b      	ldr	r2, [pc, #236]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa8b 	bl	8000ce4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fa87 	bl	8000ce4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1b7      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	4b32      	ldr	r3, [pc, #200]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80a6 	beq.w	800194c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	4a26      	ldr	r2, [pc, #152]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	@ 0x58
 800181c:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001828:	2301      	movs	r3, #1
 800182a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001844:	f7ff fa4e 	bl	8000ce4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff fa4a 	bl	8000ce4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e17a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x4d8>
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001882:	e029      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d115      	bne.n	80018b8 <HAL_RCC_OscConfig+0x50c>
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001892:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a2:	4a03      	ldr	r2, [pc, #12]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
 80018b8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018be:	4a9b      	ldr	r2, [pc, #620]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c8:	4b98      	ldr	r3, [pc, #608]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ce:	4a97      	ldr	r2, [pc, #604]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d016      	beq.n	800190e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff fa00 	bl	8000ce4 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff f9fc 	bl	8000ce4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e12a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ed      	beq.n	80018e8 <HAL_RCC_OscConfig+0x53c>
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff f9e9 	bl	8000ce4 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f9e5 	bl	8000ce4 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e113      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ed      	bne.n	8001916 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b7a      	ldr	r3, [pc, #488]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	4a79      	ldr	r2, [pc, #484]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80fe 	beq.w	8001b52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	2b02      	cmp	r3, #2
 800195c:	f040 80d0 	bne.w	8001b00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001960:	4b72      	ldr	r3, [pc, #456]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d130      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	3b01      	subs	r3, #1
 8001980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d127      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001990:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d11f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a0:	2a07      	cmp	r2, #7
 80019a2:	bf14      	ite	ne
 80019a4:	2201      	movne	r2, #1
 80019a6:	2200      	moveq	r2, #0
 80019a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d113      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d06e      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d069      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019e8:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0ad      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a04:	f7ff f96e 	bl	8000ce4 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f96a 	bl	8000ce4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e09a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1e:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	4b40      	ldr	r3, [pc, #256]	@ (8001b30 <HAL_RCC_OscConfig+0x784>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a44:	0212      	lsls	r2, r2, #8
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0552      	lsls	r2, r2, #21
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0652      	lsls	r2, r2, #25
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a64:	0912      	lsrs	r2, r2, #4
 8001a66:	0452      	lsls	r2, r2, #17
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	4930      	ldr	r1, [pc, #192]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a70:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2d      	ldr	r2, [pc, #180]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a88:	f7ff f92c 	bl	8000ce4 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f928 	bl	8000ce4 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aae:	e050      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e04f      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d148      	bne.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a16      	ldr	r2, [pc, #88]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad8:	f7ff f904 	bl	8000ce4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f900 	bl	8000ce4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e030      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x734>
 8001afe:	e028      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d023      	beq.n	8001b4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f8e7 	bl	8000ce4 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f8e3 	bl	8000ce4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d905      	bls.n	8001b34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e013      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ec      	bne.n	8001b1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4905      	ldr	r1, [pc, #20]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_RCC_OscConfig+0x7b4>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e001      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	feeefffc 	.word	0xfeeefffc

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0e7      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b75      	ldr	r3, [pc, #468]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d910      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b72      	ldr	r3, [pc, #456]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4970      	ldr	r1, [pc, #448]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b6e      	ldr	r3, [pc, #440]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cf      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b66      	ldr	r3, [pc, #408]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d908      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b63      	ldr	r3, [pc, #396]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4960      	ldr	r1, [pc, #384]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d04c      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b5a      	ldr	r3, [pc, #360]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d121      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0a6      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	4b54      	ldr	r3, [pc, #336]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e08e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e086      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4943      	ldr	r1, [pc, #268]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f84a 	bl	8000ce4 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f846 	bl	8000ce4 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e06e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d208      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	492b      	ldr	r1, [pc, #172]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d210      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 0207 	bic.w	r2, r3, #7
 8001cc0:	4923      	ldr	r1, [pc, #140]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e036      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4918      	ldr	r1, [pc, #96]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4910      	ldr	r1, [pc, #64]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d18:	f000 f824 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	490b      	ldr	r1, [pc, #44]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f4>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ff81 	bl	8000c44 <HAL_InitTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d46:	7afb      	ldrb	r3, [r7, #11]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	0800497c 	.word	0x0800497c
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d72:	4b3e      	ldr	r3, [pc, #248]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d121      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11e      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e005      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	e004      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d134      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d003      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0xac>
 8001e08:	e005      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e0c:	617b      	str	r3, [r7, #20]
      break;
 8001e0e:	e005      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e12:	617b      	str	r3, [r7, #20]
      break;
 8001e14:	e002      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	3301      	adds	r3, #1
 8001e28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0e5b      	lsrs	r3, r3, #25
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08004994 	.word	0x08004994
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4904      	ldr	r1, [pc, #16]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	0800498c 	.word	0x0800498c

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec4:	f7ff ffda 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4904      	ldr	r1, [pc, #16]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	0800498c 	.word	0x0800498c

08001eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f04:	f7ff f9ee 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f08:	6178      	str	r0, [r7, #20]
 8001f0a:	e014      	b.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	4a24      	ldr	r2, [pc, #144]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f24:	f7ff f9de 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f3c:	d10b      	bne.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b80      	cmp	r3, #128	@ 0x80
 8001f42:	d919      	bls.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f48:	d902      	bls.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e013      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f50:	2301      	movs	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e010      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	@ 0x80
 8001f5a:	d902      	bls.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e00a      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b80      	cmp	r3, #128	@ 0x80
 8001f66:	d102      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e004      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b70      	cmp	r3, #112	@ 0x70
 8001f72:	d101      	bne.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 0207 	bic.w	r2, r3, #7
 8001f80:	4909      	ldr	r1, [pc, #36]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fec:	d010      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff0:	4b86      	ldr	r3, [pc, #536]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a85      	ldr	r2, [pc, #532]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 facb 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3320      	adds	r3, #32
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fbb6 	bl	8002788 <RCCEx_PLLSAI2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002030:	4b76      	ldr	r3, [pc, #472]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800203e:	4973      	ldr	r1, [pc, #460]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d041      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800205c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002060:	d02a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002062:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002066:	d824      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800206c:	d008      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800206e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002072:	d81e      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800207c:	d010      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800207e:	e018      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002080:	4b62      	ldr	r3, [pc, #392]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a61      	ldr	r2, [pc, #388]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800208c:	e015      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fa83 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 800209a:	4603      	mov	r3, r0
 800209c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800209e:	e00c      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3320      	adds	r3, #32
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fb6e 	bl	8002788 <RCCEx_PLLSAI2_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b0:	e003      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	74fb      	strb	r3, [r7, #19]
      break;
 80020b6:	e000      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020c0:	4b52      	ldr	r3, [pc, #328]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020ce:	494f      	ldr	r1, [pc, #316]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020d6:	e001      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a0 	beq.w	800222a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ee:	4b47      	ldr	r3, [pc, #284]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b41      	ldr	r3, [pc, #260]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a40      	ldr	r2, [pc, #256]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002110:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002120:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3a      	ldr	r2, [pc, #232]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212c:	f7fe fdda 	bl	8000ce4 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002132:	e009      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7fe fdd6 	bl	8000ce4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d902      	bls.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	74fb      	strb	r3, [r7, #19]
        break;
 8002146:	e005      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002148:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d15c      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215a:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002164:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01f      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d019      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002178:	4b24      	ldr	r3, [pc, #144]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a4:	4a19      	ldr	r2, [pc, #100]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fd95 	bl	8000ce4 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021bc:	e00b      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fd91 	bl	8000ce4 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	74fb      	strb	r3, [r7, #19]
            break;
 80021d4:	e006      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ec      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ea:	4b08      	ldr	r3, [pc, #32]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fa:	4904      	ldr	r1, [pc, #16]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002202:	e009      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
 8002208:	e006      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002218:	7c7b      	ldrb	r3, [r7, #17]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b9e      	ldr	r3, [pc, #632]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4a9d      	ldr	r2, [pc, #628]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002236:	4b98      	ldr	r3, [pc, #608]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f023 0203 	bic.w	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	4994      	ldr	r1, [pc, #592]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002258:	4b8f      	ldr	r3, [pc, #572]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f023 020c 	bic.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	498c      	ldr	r1, [pc, #560]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800227a:	4b87      	ldr	r3, [pc, #540]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	4983      	ldr	r1, [pc, #524]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800229c:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	497b      	ldr	r1, [pc, #492]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022be:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022cc:	4972      	ldr	r1, [pc, #456]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	496a      	ldr	r1, [pc, #424]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002302:	4b65      	ldr	r3, [pc, #404]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002310:	4961      	ldr	r1, [pc, #388]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002324:	4b5c      	ldr	r3, [pc, #368]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002332:	4959      	ldr	r1, [pc, #356]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002346:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002354:	4950      	ldr	r1, [pc, #320]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002368:	4b4b      	ldr	r3, [pc, #300]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	4948      	ldr	r1, [pc, #288]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	493f      	ldr	r1, [pc, #252]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d028      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ba:	4937      	ldr	r1, [pc, #220]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ca:	d106      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023cc:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a31      	ldr	r2, [pc, #196]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d6:	60d3      	str	r3, [r2, #12]
 80023d8:	e011      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e2:	d10c      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3304      	adds	r3, #4
 80023e8:	2101      	movs	r1, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f8d8 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d028      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800240a:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002418:	491f      	ldr	r1, [pc, #124]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002428:	d106      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a1a      	ldr	r2, [pc, #104]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002434:	60d3      	str	r3, [r2, #12]
 8002436:	e011      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f8a9 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02b      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002486:	d109      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a02      	ldr	r2, [pc, #8]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002492:	60d3      	str	r3, [r2, #12]
 8002494:	e014      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f877 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02f      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024cc:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024da:	4928      	ldr	r1, [pc, #160]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024ea:	d10d      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f854 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d014      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	74bb      	strb	r3, [r7, #18]
 8002506:	e011      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800250c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3320      	adds	r3, #32
 8002516:	2102      	movs	r1, #2
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f935 	bl	8002788 <RCCEx_PLLSAI2_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002546:	490d      	ldr	r1, [pc, #52]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002560:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800256a:	4904      	ldr	r1, [pc, #16]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002572:	7cbb      	ldrb	r3, [r7, #18]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ae:	4b75      	ldr	r3, [pc, #468]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d018      	beq.n	80025ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025ba:	4b72      	ldr	r3, [pc, #456]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d10d      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
       ||
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
       ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d047      	beq.n	8002676 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e044      	b.n	8002676 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d018      	beq.n	8002626 <RCCEx_PLLSAI1_Config+0x86>
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d825      	bhi.n	8002644 <RCCEx_PLLSAI1_Config+0xa4>
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d002      	beq.n	8002602 <RCCEx_PLLSAI1_Config+0x62>
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d009      	beq.n	8002614 <RCCEx_PLLSAI1_Config+0x74>
 8002600:	e020      	b.n	8002644 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002602:	4b60      	ldr	r3, [pc, #384]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11d      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002612:	e01a      	b.n	800264a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002614:	4b5b      	ldr	r3, [pc, #364]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002624:	e013      	b.n	800264e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002626:	4b57      	ldr	r3, [pc, #348]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002632:	4b54      	ldr	r3, [pc, #336]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002642:	e006      	b.n	8002652 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e004      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002652:	bf00      	nop
    }

    if(status == HAL_OK)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800265a:	4b4a      	ldr	r3, [pc, #296]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	430b      	orrs	r3, r1
 8002670:	4944      	ldr	r1, [pc, #272]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d17d      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800267c:	4b41      	ldr	r3, [pc, #260]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a40      	ldr	r2, [pc, #256]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002688:	f7fe fb2c 	bl	8000ce4 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800268e:	e009      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002690:	f7fe fb28 	bl	8000ce4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	73fb      	strb	r3, [r7, #15]
        break;
 80026a2:	e005      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a4:	4b37      	ldr	r3, [pc, #220]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ef      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d160      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026bc:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	0912      	lsrs	r2, r2, #4
 80026d4:	0452      	lsls	r2, r2, #17
 80026d6:	430a      	orrs	r2, r1
 80026d8:	492a      	ldr	r1, [pc, #168]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	610b      	str	r3, [r1, #16]
 80026de:	e027      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d112      	bne.n	800270c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e6:	4b27      	ldr	r3, [pc, #156]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6892      	ldr	r2, [r2, #8]
 80026f6:	0211      	lsls	r1, r2, #8
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6912      	ldr	r2, [r2, #16]
 80026fc:	0852      	lsrs	r2, r2, #1
 80026fe:	3a01      	subs	r2, #1
 8002700:	0552      	lsls	r2, r2, #21
 8002702:	430a      	orrs	r2, r1
 8002704:	491f      	ldr	r1, [pc, #124]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	610b      	str	r3, [r1, #16]
 800270a:	e011      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800270c:	4b1d      	ldr	r3, [pc, #116]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002714:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	0211      	lsls	r1, r2, #8
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6952      	ldr	r2, [r2, #20]
 8002722:	0852      	lsrs	r2, r2, #1
 8002724:	3a01      	subs	r2, #1
 8002726:	0652      	lsls	r2, r2, #25
 8002728:	430a      	orrs	r2, r1
 800272a:	4916      	ldr	r1, [pc, #88]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002730:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a13      	ldr	r2, [pc, #76]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800273a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fad2 	bl	8000ce4 <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002742:	e009      	b.n	8002758 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002744:	f7fe face 	bl	8000ce4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
          break;
 8002756:	e005      	b.n	8002764 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002758:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4904      	ldr	r1, [pc, #16]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000

08002788 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002796:	4b6a      	ldr	r3, [pc, #424]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d018      	beq.n	80027d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027a2:	4b67      	ldr	r3, [pc, #412]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0203 	and.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d10d      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
       ||
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027ba:	4b61      	ldr	r3, [pc, #388]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
       ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d047      	beq.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e044      	b.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d018      	beq.n	800280e <RCCEx_PLLSAI2_Config+0x86>
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d825      	bhi.n	800282c <RCCEx_PLLSAI2_Config+0xa4>
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d002      	beq.n	80027ea <RCCEx_PLLSAI2_Config+0x62>
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d009      	beq.n	80027fc <RCCEx_PLLSAI2_Config+0x74>
 80027e8:	e020      	b.n	800282c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ea:	4b55      	ldr	r3, [pc, #340]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11d      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fa:	e01a      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027fc:	4b50      	ldr	r3, [pc, #320]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d116      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280c:	e013      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800280e:	4b4c      	ldr	r3, [pc, #304]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800281a:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800282a:	e006      	b.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e004      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002832:	bf00      	nop
 8002834:	e002      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800283a:	bf00      	nop
    }

    if(status == HAL_OK)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002842:	4b3f      	ldr	r3, [pc, #252]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	430b      	orrs	r3, r1
 8002858:	4939      	ldr	r1, [pc, #228]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d167      	bne.n	8002934 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002864:	4b36      	ldr	r3, [pc, #216]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a35      	ldr	r2, [pc, #212]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7fe fa38 	bl	8000ce4 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002876:	e009      	b.n	800288c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002878:	f7fe fa34 	bl	8000ce4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d902      	bls.n	800288c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	73fb      	strb	r3, [r7, #15]
        break;
 800288a:	e005      	b.n	8002898 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800288c:	4b2c      	ldr	r3, [pc, #176]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ef      	bne.n	8002878 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d14a      	bne.n	8002934 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d111      	bne.n	80028c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a4:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6892      	ldr	r2, [r2, #8]
 80028b4:	0211      	lsls	r1, r2, #8
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	0912      	lsrs	r2, r2, #4
 80028bc:	0452      	lsls	r2, r2, #17
 80028be:	430a      	orrs	r2, r1
 80028c0:	491f      	ldr	r1, [pc, #124]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	614b      	str	r3, [r1, #20]
 80028c6:	e011      	b.n	80028ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	0211      	lsls	r1, r2, #8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6912      	ldr	r2, [r2, #16]
 80028de:	0852      	lsrs	r2, r2, #1
 80028e0:	3a01      	subs	r2, #1
 80028e2:	0652      	lsls	r2, r2, #25
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4916      	ldr	r1, [pc, #88]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a13      	ldr	r2, [pc, #76]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe f9f4 	bl	8000ce4 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028fe:	e009      	b.n	8002914 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002900:	f7fe f9f0 	bl	8000ce4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	73fb      	strb	r3, [r7, #15]
          break;
 8002912:	e005      	b.n	8002920 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002914:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ef      	beq.n	8002900 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4904      	ldr	r1, [pc, #16]	@ (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002930:	4313      	orrs	r3, r2
 8002932:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d079      	beq.n	8002a4a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fd ffb6 	bl	80008dc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b10      	cmp	r3, #16
 8002984:	d058      	beq.n	8002a38 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	22ca      	movs	r2, #202	@ 0xca
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2253      	movs	r2, #83	@ 0x53
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fa4e 	bl	8002e38 <RTC_EnterInitMode>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d127      	bne.n	80029f6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80029b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029b8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68d2      	ldr	r2, [r2, #12]
 80029e0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6919      	ldr	r1, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa52 	bl	8002ea0 <RTC_ExitInitMode>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0203 	bic.w	r2, r2, #3
 8002a14:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	22ff      	movs	r2, #255	@ 0xff
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a36:	e001      	b.n	8002a3c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_RTC_SetTime+0x1a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e08b      	b.n	8002b86 <HAL_RTC_SetTime+0x132>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	22ca      	movs	r2, #202	@ 0xca
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2253      	movs	r2, #83	@ 0x53
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f9d2 	bl	8002e38 <RTC_EnterInitMode>
 8002a94:	4603      	mov	r3, r0
 8002a96:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d163      	bne.n	8002b66 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d126      	bne.n	8002af2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fa2d 	bl	8002f1c <RTC_ByteToBcd2>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fa26 	bl	8002f1c <RTC_ByteToBcd2>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ad4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	789b      	ldrb	r3, [r3, #2]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fa1e 	bl	8002f1c <RTC_ByteToBcd2>
 8002ae0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ae2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	78db      	ldrb	r3, [r3, #3]
 8002aea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e018      	b.n	8002b24 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	785b      	ldrb	r3, [r3, #1]
 8002b10:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b12:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b18:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	78db      	ldrb	r3, [r3, #3]
 8002b1e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002b2e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002b32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f99f 	bl	8002ea0 <RTC_ExitInitMode>
 8002b62:	4603      	mov	r3, r0
 8002b64:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	22ff      	movs	r2, #255	@ 0xff
 8002b6c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}

08002b8e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002bbc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	0d9b      	lsrs	r3, r3, #22
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11a      	bne.n	8002c3c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f9a6 	bl	8002f5c <RTC_Bcd2ToByte>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f99d 	bl	8002f5c <RTC_Bcd2ToByte>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	789b      	ldrb	r3, [r3, #2]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f994 	bl	8002f5c <RTC_Bcd2ToByte>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c46:	b590      	push	{r4, r7, lr}
 8002c48:	b087      	sub	sp, #28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_RTC_SetDate+0x1a>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e075      	b.n	8002d4c <HAL_RTC_SetDate+0x106>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10e      	bne.n	8002c94 <HAL_RTC_SetDate+0x4e>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	785b      	ldrb	r3, [r3, #1]
 8002c86:	f023 0310 	bic.w	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	330a      	adds	r3, #10
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	78db      	ldrb	r3, [r3, #3]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f93c 	bl	8002f1c <RTC_ByteToBcd2>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f935 	bl	8002f1c <RTC_ByteToBcd2>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cb6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	789b      	ldrb	r3, [r3, #2]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f92d 	bl	8002f1c <RTC_ByteToBcd2>
 8002cc2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cc4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e00e      	b.n	8002cf2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	78db      	ldrb	r3, [r3, #3]
 8002cd8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	785b      	ldrb	r3, [r3, #1]
 8002cde:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ce0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ce6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	22ca      	movs	r2, #202	@ 0xca
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2253      	movs	r2, #83	@ 0x53
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f898 	bl	8002e38 <RTC_EnterInitMode>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10c      	bne.n	8002d2c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d1c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d20:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f8bc 	bl	8002ea0 <RTC_ExitInitMode>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	22ff      	movs	r2, #255	@ 0xff
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}

08002d54 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	0b5b      	lsrs	r3, r3, #13
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11a      	bne.n	8002de4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	78db      	ldrb	r3, [r3, #3]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f8d2 	bl	8002f5c <RTC_Bcd2ToByte>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f8c9 	bl	8002f5c <RTC_Bcd2ToByte>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	789b      	ldrb	r3, [r3, #2]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8c0 	bl	8002f5c <RTC_Bcd2ToByte>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <HAL_RTC_WaitForSynchro+0x44>)
 8002dfe:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002e00:	f7fd ff70 	bl	8000ce4 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e06:	e009      	b.n	8002e1c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e08:	f7fd ff6c 	bl	8000ce4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e16:	d901      	bls.n	8002e1c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e007      	b.n	8002e2c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ee      	beq.n	8002e08 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	0003ff5f 	.word	0x0003ff5f

08002e38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d120      	bne.n	8002e94 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e5c:	f7fd ff42 	bl	8000ce4 <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e62:	e00d      	b.n	8002e80 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002e64:	f7fd ff3e 	bl	8000ce4 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e72:	d905      	bls.n	8002e80 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <RTC_EnterInitMode+0x5c>
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d1e7      	bne.n	8002e64 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002eac:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <RTC_ExitInitMode+0x78>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a19      	ldr	r2, [pc, #100]	@ (8002f18 <RTC_ExitInitMode+0x78>)
 8002eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eb6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <RTC_ExitInitMode+0x78>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff93 	bl	8002df0 <HAL_RTC_WaitForSynchro>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01e      	beq.n	8002f0e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e017      	b.n	8002f0e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ede:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <RTC_ExitInitMode+0x78>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8002f18 <RTC_ExitInitMode+0x78>)
 8002ee4:	f023 0320 	bic.w	r3, r3, #32
 8002ee8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ff80 	bl	8002df0 <HAL_RTC_WaitForSynchro>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2203      	movs	r2, #3
 8002efa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f02:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <RTC_ExitInitMode+0x78>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4a04      	ldr	r2, [pc, #16]	@ (8002f18 <RTC_ExitInitMode+0x78>)
 8002f08:	f043 0320 	orr.w	r3, r3, #32
 8002f0c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40002800 	.word	0x40002800

08002f1c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002f2e:	e005      	b.n	8002f3c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002f36:	7afb      	ldrb	r3, [r7, #11]
 8002f38:	3b0a      	subs	r3, #10
 8002f3a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002f3c:	7afb      	ldrb	r3, [r7, #11]
 8002f3e:	2b09      	cmp	r3, #9
 8002f40:	d8f6      	bhi.n	8002f30 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	b2db      	uxtb	r3, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	4413      	add	r3, r2
 8002f82:	b2db      	uxtb	r3, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e040      	b.n	8003024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fcc4 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	@ 0x24
 8002fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0201 	bic.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fb6a 	bl	80036b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f8af 	bl	8003140 <UART_SetConfig>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e01b      	b.n	8003024 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800300a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fbe9 	bl	80037f4 <UART_CheckIdleState>
 8003022:	4603      	mov	r3, r0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	@ 0x28
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003040:	2b20      	cmp	r3, #32
 8003042:	d177      	bne.n	8003134 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_UART_Transmit+0x24>
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e070      	b.n	8003136 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2221      	movs	r2, #33	@ 0x21
 8003060:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003062:	f7fd fe3f 	bl	8000ce4 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003080:	d108      	bne.n	8003094 <HAL_UART_Transmit+0x68>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e003      	b.n	800309c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800309c:	e02f      	b.n	80030fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fc4b 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e03b      	b.n	8003136 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	881a      	ldrh	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d0:	b292      	uxth	r2, r2
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	3302      	adds	r3, #2
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e007      	b.n	80030ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1c9      	bne.n	800309e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2200      	movs	r2, #0
 8003112:	2140      	movs	r1, #64	@ 0x40
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fc15 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e005      	b.n	8003136 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003144:	b08a      	sub	sp, #40	@ 0x28
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	431a      	orrs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4ba4      	ldr	r3, [pc, #656]	@ (8003400 <UART_SetConfig+0x2c0>)
 8003170:	4013      	ands	r3, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003178:	430b      	orrs	r3, r1
 800317a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a99      	ldr	r2, [pc, #612]	@ (8003404 <UART_SetConfig+0x2c4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a8:	4313      	orrs	r3, r2
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a90      	ldr	r2, [pc, #576]	@ (8003408 <UART_SetConfig+0x2c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d126      	bne.n	8003218 <UART_SetConfig+0xd8>
 80031ca:	4b90      	ldr	r3, [pc, #576]	@ (800340c <UART_SetConfig+0x2cc>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d81b      	bhi.n	8003210 <UART_SetConfig+0xd0>
 80031d8:	a201      	add	r2, pc, #4	@ (adr r2, 80031e0 <UART_SetConfig+0xa0>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	08003201 	.word	0x08003201
 80031e8:	080031f9 	.word	0x080031f9
 80031ec:	08003209 	.word	0x08003209
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f6:	e116      	b.n	8003426 <UART_SetConfig+0x2e6>
 80031f8:	2302      	movs	r3, #2
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e112      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003200:	2304      	movs	r3, #4
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003206:	e10e      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003208:	2308      	movs	r3, #8
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e10a      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e106      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7c      	ldr	r2, [pc, #496]	@ (8003410 <UART_SetConfig+0x2d0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d138      	bne.n	8003294 <UART_SetConfig+0x154>
 8003222:	4b7a      	ldr	r3, [pc, #488]	@ (800340c <UART_SetConfig+0x2cc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d82d      	bhi.n	800328c <UART_SetConfig+0x14c>
 8003230:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <UART_SetConfig+0xf8>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	0800326d 	.word	0x0800326d
 800323c:	0800328d 	.word	0x0800328d
 8003240:	0800328d 	.word	0x0800328d
 8003244:	0800328d 	.word	0x0800328d
 8003248:	0800327d 	.word	0x0800327d
 800324c:	0800328d 	.word	0x0800328d
 8003250:	0800328d 	.word	0x0800328d
 8003254:	0800328d 	.word	0x0800328d
 8003258:	08003275 	.word	0x08003275
 800325c:	0800328d 	.word	0x0800328d
 8003260:	0800328d 	.word	0x0800328d
 8003264:	0800328d 	.word	0x0800328d
 8003268:	08003285 	.word	0x08003285
 800326c:	2300      	movs	r3, #0
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003272:	e0d8      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003274:	2302      	movs	r3, #2
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327a:	e0d4      	b.n	8003426 <UART_SetConfig+0x2e6>
 800327c:	2304      	movs	r3, #4
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003282:	e0d0      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003284:	2308      	movs	r3, #8
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328a:	e0cc      	b.n	8003426 <UART_SetConfig+0x2e6>
 800328c:	2310      	movs	r3, #16
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003292:	e0c8      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5e      	ldr	r2, [pc, #376]	@ (8003414 <UART_SetConfig+0x2d4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d125      	bne.n	80032ea <UART_SetConfig+0x1aa>
 800329e:	4b5b      	ldr	r3, [pc, #364]	@ (800340c <UART_SetConfig+0x2cc>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032a8:	2b30      	cmp	r3, #48	@ 0x30
 80032aa:	d016      	beq.n	80032da <UART_SetConfig+0x19a>
 80032ac:	2b30      	cmp	r3, #48	@ 0x30
 80032ae:	d818      	bhi.n	80032e2 <UART_SetConfig+0x1a2>
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d00a      	beq.n	80032ca <UART_SetConfig+0x18a>
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d814      	bhi.n	80032e2 <UART_SetConfig+0x1a2>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <UART_SetConfig+0x182>
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d008      	beq.n	80032d2 <UART_SetConfig+0x192>
 80032c0:	e00f      	b.n	80032e2 <UART_SetConfig+0x1a2>
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c8:	e0ad      	b.n	8003426 <UART_SetConfig+0x2e6>
 80032ca:	2302      	movs	r3, #2
 80032cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d0:	e0a9      	b.n	8003426 <UART_SetConfig+0x2e6>
 80032d2:	2304      	movs	r3, #4
 80032d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d8:	e0a5      	b.n	8003426 <UART_SetConfig+0x2e6>
 80032da:	2308      	movs	r3, #8
 80032dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e0:	e0a1      	b.n	8003426 <UART_SetConfig+0x2e6>
 80032e2:	2310      	movs	r3, #16
 80032e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e8:	e09d      	b.n	8003426 <UART_SetConfig+0x2e6>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003418 <UART_SetConfig+0x2d8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x200>
 80032f4:	4b45      	ldr	r3, [pc, #276]	@ (800340c <UART_SetConfig+0x2cc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003300:	d016      	beq.n	8003330 <UART_SetConfig+0x1f0>
 8003302:	2bc0      	cmp	r3, #192	@ 0xc0
 8003304:	d818      	bhi.n	8003338 <UART_SetConfig+0x1f8>
 8003306:	2b80      	cmp	r3, #128	@ 0x80
 8003308:	d00a      	beq.n	8003320 <UART_SetConfig+0x1e0>
 800330a:	2b80      	cmp	r3, #128	@ 0x80
 800330c:	d814      	bhi.n	8003338 <UART_SetConfig+0x1f8>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <UART_SetConfig+0x1d8>
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d008      	beq.n	8003328 <UART_SetConfig+0x1e8>
 8003316:	e00f      	b.n	8003338 <UART_SetConfig+0x1f8>
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800331e:	e082      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003320:	2302      	movs	r3, #2
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003326:	e07e      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003328:	2304      	movs	r3, #4
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800332e:	e07a      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003330:	2308      	movs	r3, #8
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003336:	e076      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003338:	2310      	movs	r3, #16
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333e:	e072      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a35      	ldr	r2, [pc, #212]	@ (800341c <UART_SetConfig+0x2dc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d12a      	bne.n	80033a0 <UART_SetConfig+0x260>
 800334a:	4b30      	ldr	r3, [pc, #192]	@ (800340c <UART_SetConfig+0x2cc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003350:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003354:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003358:	d01a      	beq.n	8003390 <UART_SetConfig+0x250>
 800335a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800335e:	d81b      	bhi.n	8003398 <UART_SetConfig+0x258>
 8003360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003364:	d00c      	beq.n	8003380 <UART_SetConfig+0x240>
 8003366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800336a:	d815      	bhi.n	8003398 <UART_SetConfig+0x258>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x238>
 8003370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003374:	d008      	beq.n	8003388 <UART_SetConfig+0x248>
 8003376:	e00f      	b.n	8003398 <UART_SetConfig+0x258>
 8003378:	2300      	movs	r3, #0
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337e:	e052      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003380:	2302      	movs	r3, #2
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003386:	e04e      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003388:	2304      	movs	r3, #4
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338e:	e04a      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003390:	2308      	movs	r3, #8
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003396:	e046      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003398:	2310      	movs	r3, #16
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800339e:	e042      	b.n	8003426 <UART_SetConfig+0x2e6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a17      	ldr	r2, [pc, #92]	@ (8003404 <UART_SetConfig+0x2c4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d13a      	bne.n	8003420 <UART_SetConfig+0x2e0>
 80033aa:	4b18      	ldr	r3, [pc, #96]	@ (800340c <UART_SetConfig+0x2cc>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033b8:	d01a      	beq.n	80033f0 <UART_SetConfig+0x2b0>
 80033ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033be:	d81b      	bhi.n	80033f8 <UART_SetConfig+0x2b8>
 80033c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c4:	d00c      	beq.n	80033e0 <UART_SetConfig+0x2a0>
 80033c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ca:	d815      	bhi.n	80033f8 <UART_SetConfig+0x2b8>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <UART_SetConfig+0x298>
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d4:	d008      	beq.n	80033e8 <UART_SetConfig+0x2a8>
 80033d6:	e00f      	b.n	80033f8 <UART_SetConfig+0x2b8>
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x2e6>
 80033e0:	2302      	movs	r3, #2
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e6:	e01e      	b.n	8003426 <UART_SetConfig+0x2e6>
 80033e8:	2304      	movs	r3, #4
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ee:	e01a      	b.n	8003426 <UART_SetConfig+0x2e6>
 80033f0:	2308      	movs	r3, #8
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f6:	e016      	b.n	8003426 <UART_SetConfig+0x2e6>
 80033f8:	2310      	movs	r3, #16
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fe:	e012      	b.n	8003426 <UART_SetConfig+0x2e6>
 8003400:	efff69f3 	.word	0xefff69f3
 8003404:	40008000 	.word	0x40008000
 8003408:	40013800 	.word	0x40013800
 800340c:	40021000 	.word	0x40021000
 8003410:	40004400 	.word	0x40004400
 8003414:	40004800 	.word	0x40004800
 8003418:	40004c00 	.word	0x40004c00
 800341c:	40005000 	.word	0x40005000
 8003420:	2310      	movs	r3, #16
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a9f      	ldr	r2, [pc, #636]	@ (80036a8 <UART_SetConfig+0x568>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d17a      	bne.n	8003526 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003430:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003434:	2b08      	cmp	r3, #8
 8003436:	d824      	bhi.n	8003482 <UART_SetConfig+0x342>
 8003438:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <UART_SetConfig+0x300>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003465 	.word	0x08003465
 8003444:	08003483 	.word	0x08003483
 8003448:	0800346d 	.word	0x0800346d
 800344c:	08003483 	.word	0x08003483
 8003450:	08003473 	.word	0x08003473
 8003454:	08003483 	.word	0x08003483
 8003458:	08003483 	.word	0x08003483
 800345c:	08003483 	.word	0x08003483
 8003460:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe fd16 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003468:	61f8      	str	r0, [r7, #28]
        break;
 800346a:	e010      	b.n	800348e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800346c:	4b8f      	ldr	r3, [pc, #572]	@ (80036ac <UART_SetConfig+0x56c>)
 800346e:	61fb      	str	r3, [r7, #28]
        break;
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7fe fc77 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003476:	61f8      	str	r0, [r7, #28]
        break;
 8003478:	e009      	b.n	800348e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347e:	61fb      	str	r3, [r7, #28]
        break;
 8003480:	e005      	b.n	800348e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800348c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80fb 	beq.w	800368c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d305      	bcc.n	80034b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d903      	bls.n	80034ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034b8:	e0e8      	b.n	800368c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2200      	movs	r2, #0
 80034be:	461c      	mov	r4, r3
 80034c0:	4615      	mov	r5, r2
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	022b      	lsls	r3, r5, #8
 80034cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034d0:	0222      	lsls	r2, r4, #8
 80034d2:	68f9      	ldr	r1, [r7, #12]
 80034d4:	6849      	ldr	r1, [r1, #4]
 80034d6:	0849      	lsrs	r1, r1, #1
 80034d8:	2000      	movs	r0, #0
 80034da:	4688      	mov	r8, r1
 80034dc:	4681      	mov	r9, r0
 80034de:	eb12 0a08 	adds.w	sl, r2, r8
 80034e2:	eb43 0b09 	adc.w	fp, r3, r9
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034f4:	4650      	mov	r0, sl
 80034f6:	4659      	mov	r1, fp
 80034f8:	f7fc feba 	bl	8000270 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4613      	mov	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800350a:	d308      	bcc.n	800351e <UART_SetConfig+0x3de>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003512:	d204      	bcs.n	800351e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	60da      	str	r2, [r3, #12]
 800351c:	e0b6      	b.n	800368c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003524:	e0b2      	b.n	800368c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800352e:	d15e      	bne.n	80035ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003530:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003534:	2b08      	cmp	r3, #8
 8003536:	d828      	bhi.n	800358a <UART_SetConfig+0x44a>
 8003538:	a201      	add	r2, pc, #4	@ (adr r2, 8003540 <UART_SetConfig+0x400>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003565 	.word	0x08003565
 8003544:	0800356d 	.word	0x0800356d
 8003548:	08003575 	.word	0x08003575
 800354c:	0800358b 	.word	0x0800358b
 8003550:	0800357b 	.word	0x0800357b
 8003554:	0800358b 	.word	0x0800358b
 8003558:	0800358b 	.word	0x0800358b
 800355c:	0800358b 	.word	0x0800358b
 8003560:	08003583 	.word	0x08003583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003564:	f7fe fc96 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003568:	61f8      	str	r0, [r7, #28]
        break;
 800356a:	e014      	b.n	8003596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800356c:	f7fe fca8 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8003570:	61f8      	str	r0, [r7, #28]
        break;
 8003572:	e010      	b.n	8003596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003574:	4b4d      	ldr	r3, [pc, #308]	@ (80036ac <UART_SetConfig+0x56c>)
 8003576:	61fb      	str	r3, [r7, #28]
        break;
 8003578:	e00d      	b.n	8003596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357a:	f7fe fbf3 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 800357e:	61f8      	str	r0, [r7, #28]
        break;
 8003580:	e009      	b.n	8003596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003586:	61fb      	str	r3, [r7, #28]
        break;
 8003588:	e005      	b.n	8003596 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d077      	beq.n	800368c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	005a      	lsls	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	441a      	add	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d916      	bls.n	80035e6 <UART_SetConfig+0x4a6>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035be:	d212      	bcs.n	80035e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f023 030f 	bic.w	r3, r3, #15
 80035c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	4313      	orrs	r3, r2
 80035da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	8afa      	ldrh	r2, [r7, #22]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e052      	b.n	800368c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035ec:	e04e      	b.n	800368c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d827      	bhi.n	8003646 <UART_SetConfig+0x506>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <UART_SetConfig+0x4bc>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003621 	.word	0x08003621
 8003600:	08003629 	.word	0x08003629
 8003604:	08003631 	.word	0x08003631
 8003608:	08003647 	.word	0x08003647
 800360c:	08003637 	.word	0x08003637
 8003610:	08003647 	.word	0x08003647
 8003614:	08003647 	.word	0x08003647
 8003618:	08003647 	.word	0x08003647
 800361c:	0800363f 	.word	0x0800363f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003620:	f7fe fc38 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003624:	61f8      	str	r0, [r7, #28]
        break;
 8003626:	e014      	b.n	8003652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7fe fc4a 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 800362c:	61f8      	str	r0, [r7, #28]
        break;
 800362e:	e010      	b.n	8003652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003630:	4b1e      	ldr	r3, [pc, #120]	@ (80036ac <UART_SetConfig+0x56c>)
 8003632:	61fb      	str	r3, [r7, #28]
        break;
 8003634:	e00d      	b.n	8003652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003636:	f7fe fb95 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 800363a:	61f8      	str	r0, [r7, #28]
        break;
 800363c:	e009      	b.n	8003652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003642:	61fb      	str	r3, [r7, #28]
        break;
 8003644:	e005      	b.n	8003652 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003650:	bf00      	nop
    }

    if (pclk != 0U)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d019      	beq.n	800368c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	085a      	lsrs	r2, r3, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d909      	bls.n	8003686 <UART_SetConfig+0x546>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003678:	d205      	bcs.n	8003686 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	e002      	b.n	800368c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003698:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800369c:	4618      	mov	r0, r3
 800369e:	3728      	adds	r7, #40	@ 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a6:	bf00      	nop
 80036a8:	40008000 	.word	0x40008000
 80036ac:	00f42400 	.word	0x00f42400

080036b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01a      	beq.n	80037c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ae:	d10a      	bne.n	80037c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b098      	sub	sp, #96	@ 0x60
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003804:	f7fd fa6e 	bl	8000ce4 <HAL_GetTick>
 8003808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d12e      	bne.n	8003876 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003820:	2200      	movs	r2, #0
 8003822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f88c 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d021      	beq.n	8003876 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003846:	653b      	str	r3, [r7, #80]	@ 0x50
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003850:	647b      	str	r3, [r7, #68]	@ 0x44
 8003852:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800385e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e6      	bne.n	8003832 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e062      	b.n	800393c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d149      	bne.n	8003918 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	2200      	movs	r2, #0
 800388e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f856 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03c      	beq.n	8003918 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	623b      	str	r3, [r7, #32]
   return(result);
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e6      	bne.n	800389e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3308      	adds	r3, #8
 80038d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038f0:	61fa      	str	r2, [r7, #28]
 80038f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	617b      	str	r3, [r7, #20]
   return(result);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e011      	b.n	800393c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3758      	adds	r7, #88	@ 0x58
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	e049      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d045      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fd f9c1 	bl	8000ce4 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <UART_WaitOnFlagUntilTimeout+0x30>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e048      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d031      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b08      	cmp	r3, #8
 8003992:	d110      	bne.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2208      	movs	r2, #8
 800399a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f838 	bl	8003a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2208      	movs	r2, #8
 80039a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e029      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c4:	d111      	bne.n	80039ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f81e 	bl	8003a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e00f      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4013      	ands	r3, r2
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d0a6      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b095      	sub	sp, #84	@ 0x54
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e6      	bne.n	8003a1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3308      	adds	r3, #8
 8003a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e5      	bne.n	8003a4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d118      	bne.n	8003aba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f023 0310 	bic.w	r3, r3, #16
 8003a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6979      	ldr	r1, [r7, #20]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e6      	bne.n	8003a88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ace:	bf00      	nop
 8003ad0:	3754      	adds	r7, #84	@ 0x54
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <std>:
 8003adc:	2300      	movs	r3, #0
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003aea:	6083      	str	r3, [r0, #8]
 8003aec:	8181      	strh	r1, [r0, #12]
 8003aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8003af0:	81c2      	strh	r2, [r0, #14]
 8003af2:	6183      	str	r3, [r0, #24]
 8003af4:	4619      	mov	r1, r3
 8003af6:	2208      	movs	r2, #8
 8003af8:	305c      	adds	r0, #92	@ 0x5c
 8003afa:	f000 f906 	bl	8003d0a <memset>
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <std+0x58>)
 8003b00:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b02:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <std+0x5c>)
 8003b04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b06:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <std+0x60>)
 8003b08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <std+0x64>)
 8003b0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <std+0x68>)
 8003b10:	6224      	str	r4, [r4, #32]
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d006      	beq.n	8003b24 <std+0x48>
 8003b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b1a:	4294      	cmp	r4, r2
 8003b1c:	d002      	beq.n	8003b24 <std+0x48>
 8003b1e:	33d0      	adds	r3, #208	@ 0xd0
 8003b20:	429c      	cmp	r4, r3
 8003b22:	d105      	bne.n	8003b30 <std+0x54>
 8003b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b2c:	f000 b966 	b.w	8003dfc <__retarget_lock_init_recursive>
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	bf00      	nop
 8003b34:	08003c85 	.word	0x08003c85
 8003b38:	08003ca7 	.word	0x08003ca7
 8003b3c:	08003cdf 	.word	0x08003cdf
 8003b40:	08003d03 	.word	0x08003d03
 8003b44:	20000138 	.word	0x20000138

08003b48 <stdio_exit_handler>:
 8003b48:	4a02      	ldr	r2, [pc, #8]	@ (8003b54 <stdio_exit_handler+0xc>)
 8003b4a:	4903      	ldr	r1, [pc, #12]	@ (8003b58 <stdio_exit_handler+0x10>)
 8003b4c:	4803      	ldr	r0, [pc, #12]	@ (8003b5c <stdio_exit_handler+0x14>)
 8003b4e:	f000 b869 	b.w	8003c24 <_fwalk_sglue>
 8003b52:	bf00      	nop
 8003b54:	2000000c 	.word	0x2000000c
 8003b58:	0800469d 	.word	0x0800469d
 8003b5c:	2000001c 	.word	0x2000001c

08003b60 <cleanup_stdio>:
 8003b60:	6841      	ldr	r1, [r0, #4]
 8003b62:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <cleanup_stdio+0x34>)
 8003b64:	4299      	cmp	r1, r3
 8003b66:	b510      	push	{r4, lr}
 8003b68:	4604      	mov	r4, r0
 8003b6a:	d001      	beq.n	8003b70 <cleanup_stdio+0x10>
 8003b6c:	f000 fd96 	bl	800469c <_fflush_r>
 8003b70:	68a1      	ldr	r1, [r4, #8]
 8003b72:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <cleanup_stdio+0x38>)
 8003b74:	4299      	cmp	r1, r3
 8003b76:	d002      	beq.n	8003b7e <cleanup_stdio+0x1e>
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f000 fd8f 	bl	800469c <_fflush_r>
 8003b7e:	68e1      	ldr	r1, [r4, #12]
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <cleanup_stdio+0x3c>)
 8003b82:	4299      	cmp	r1, r3
 8003b84:	d004      	beq.n	8003b90 <cleanup_stdio+0x30>
 8003b86:	4620      	mov	r0, r4
 8003b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b8c:	f000 bd86 	b.w	800469c <_fflush_r>
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	bf00      	nop
 8003b94:	20000138 	.word	0x20000138
 8003b98:	200001a0 	.word	0x200001a0
 8003b9c:	20000208 	.word	0x20000208

08003ba0 <global_stdio_init.part.0>:
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <global_stdio_init.part.0+0x30>)
 8003ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8003bd4 <global_stdio_init.part.0+0x34>)
 8003ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd8 <global_stdio_init.part.0+0x38>)
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	4620      	mov	r0, r4
 8003bac:	2200      	movs	r2, #0
 8003bae:	2104      	movs	r1, #4
 8003bb0:	f7ff ff94 	bl	8003adc <std>
 8003bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003bb8:	2201      	movs	r2, #1
 8003bba:	2109      	movs	r1, #9
 8003bbc:	f7ff ff8e 	bl	8003adc <std>
 8003bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bca:	2112      	movs	r1, #18
 8003bcc:	f7ff bf86 	b.w	8003adc <std>
 8003bd0:	20000270 	.word	0x20000270
 8003bd4:	20000138 	.word	0x20000138
 8003bd8:	08003b49 	.word	0x08003b49

08003bdc <__sfp_lock_acquire>:
 8003bdc:	4801      	ldr	r0, [pc, #4]	@ (8003be4 <__sfp_lock_acquire+0x8>)
 8003bde:	f000 b90e 	b.w	8003dfe <__retarget_lock_acquire_recursive>
 8003be2:	bf00      	nop
 8003be4:	20000279 	.word	0x20000279

08003be8 <__sfp_lock_release>:
 8003be8:	4801      	ldr	r0, [pc, #4]	@ (8003bf0 <__sfp_lock_release+0x8>)
 8003bea:	f000 b909 	b.w	8003e00 <__retarget_lock_release_recursive>
 8003bee:	bf00      	nop
 8003bf0:	20000279 	.word	0x20000279

08003bf4 <__sinit>:
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	f7ff fff0 	bl	8003bdc <__sfp_lock_acquire>
 8003bfc:	6a23      	ldr	r3, [r4, #32]
 8003bfe:	b11b      	cbz	r3, 8003c08 <__sinit+0x14>
 8003c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c04:	f7ff bff0 	b.w	8003be8 <__sfp_lock_release>
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <__sinit+0x28>)
 8003c0a:	6223      	str	r3, [r4, #32]
 8003c0c:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <__sinit+0x2c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f5      	bne.n	8003c00 <__sinit+0xc>
 8003c14:	f7ff ffc4 	bl	8003ba0 <global_stdio_init.part.0>
 8003c18:	e7f2      	b.n	8003c00 <__sinit+0xc>
 8003c1a:	bf00      	nop
 8003c1c:	08003b61 	.word	0x08003b61
 8003c20:	20000270 	.word	0x20000270

08003c24 <_fwalk_sglue>:
 8003c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c28:	4607      	mov	r7, r0
 8003c2a:	4688      	mov	r8, r1
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	2600      	movs	r6, #0
 8003c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c34:	f1b9 0901 	subs.w	r9, r9, #1
 8003c38:	d505      	bpl.n	8003c46 <_fwalk_sglue+0x22>
 8003c3a:	6824      	ldr	r4, [r4, #0]
 8003c3c:	2c00      	cmp	r4, #0
 8003c3e:	d1f7      	bne.n	8003c30 <_fwalk_sglue+0xc>
 8003c40:	4630      	mov	r0, r6
 8003c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c46:	89ab      	ldrh	r3, [r5, #12]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d907      	bls.n	8003c5c <_fwalk_sglue+0x38>
 8003c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c50:	3301      	adds	r3, #1
 8003c52:	d003      	beq.n	8003c5c <_fwalk_sglue+0x38>
 8003c54:	4629      	mov	r1, r5
 8003c56:	4638      	mov	r0, r7
 8003c58:	47c0      	blx	r8
 8003c5a:	4306      	orrs	r6, r0
 8003c5c:	3568      	adds	r5, #104	@ 0x68
 8003c5e:	e7e9      	b.n	8003c34 <_fwalk_sglue+0x10>

08003c60 <iprintf>:
 8003c60:	b40f      	push	{r0, r1, r2, r3}
 8003c62:	b507      	push	{r0, r1, r2, lr}
 8003c64:	4906      	ldr	r1, [pc, #24]	@ (8003c80 <iprintf+0x20>)
 8003c66:	ab04      	add	r3, sp, #16
 8003c68:	6808      	ldr	r0, [r1, #0]
 8003c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c6e:	6881      	ldr	r1, [r0, #8]
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	f000 f9e9 	bl	8004048 <_vfiprintf_r>
 8003c76:	b003      	add	sp, #12
 8003c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c7c:	b004      	add	sp, #16
 8003c7e:	4770      	bx	lr
 8003c80:	20000018 	.word	0x20000018

08003c84 <__sread>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	460c      	mov	r4, r1
 8003c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c8c:	f000 f868 	bl	8003d60 <_read_r>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	bfab      	itete	ge
 8003c94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c96:	89a3      	ldrhlt	r3, [r4, #12]
 8003c98:	181b      	addge	r3, r3, r0
 8003c9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c9e:	bfac      	ite	ge
 8003ca0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ca2:	81a3      	strhlt	r3, [r4, #12]
 8003ca4:	bd10      	pop	{r4, pc}

08003ca6 <__swrite>:
 8003ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003caa:	461f      	mov	r7, r3
 8003cac:	898b      	ldrh	r3, [r1, #12]
 8003cae:	05db      	lsls	r3, r3, #23
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	4616      	mov	r6, r2
 8003cb6:	d505      	bpl.n	8003cc4 <__swrite+0x1e>
 8003cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f000 f83c 	bl	8003d3c <_lseek_r>
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cce:	81a3      	strh	r3, [r4, #12]
 8003cd0:	4632      	mov	r2, r6
 8003cd2:	463b      	mov	r3, r7
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cda:	f000 b853 	b.w	8003d84 <_write_r>

08003cde <__sseek>:
 8003cde:	b510      	push	{r4, lr}
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce6:	f000 f829 	bl	8003d3c <_lseek_r>
 8003cea:	1c43      	adds	r3, r0, #1
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	bf15      	itete	ne
 8003cf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003cf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003cf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003cfa:	81a3      	strheq	r3, [r4, #12]
 8003cfc:	bf18      	it	ne
 8003cfe:	81a3      	strhne	r3, [r4, #12]
 8003d00:	bd10      	pop	{r4, pc}

08003d02 <__sclose>:
 8003d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d06:	f000 b809 	b.w	8003d1c <_close_r>

08003d0a <memset>:
 8003d0a:	4402      	add	r2, r0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d100      	bne.n	8003d14 <memset+0xa>
 8003d12:	4770      	bx	lr
 8003d14:	f803 1b01 	strb.w	r1, [r3], #1
 8003d18:	e7f9      	b.n	8003d0e <memset+0x4>
	...

08003d1c <_close_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4d06      	ldr	r5, [pc, #24]	@ (8003d38 <_close_r+0x1c>)
 8003d20:	2300      	movs	r3, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	602b      	str	r3, [r5, #0]
 8003d28:	f7fc fece 	bl	8000ac8 <_close>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d102      	bne.n	8003d36 <_close_r+0x1a>
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	b103      	cbz	r3, 8003d36 <_close_r+0x1a>
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	bd38      	pop	{r3, r4, r5, pc}
 8003d38:	20000274 	.word	0x20000274

08003d3c <_lseek_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4d07      	ldr	r5, [pc, #28]	@ (8003d5c <_lseek_r+0x20>)
 8003d40:	4604      	mov	r4, r0
 8003d42:	4608      	mov	r0, r1
 8003d44:	4611      	mov	r1, r2
 8003d46:	2200      	movs	r2, #0
 8003d48:	602a      	str	r2, [r5, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f7fc fee3 	bl	8000b16 <_lseek>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_lseek_r+0x1e>
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_lseek_r+0x1e>
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	20000274 	.word	0x20000274

08003d60 <_read_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	4d07      	ldr	r5, [pc, #28]	@ (8003d80 <_read_r+0x20>)
 8003d64:	4604      	mov	r4, r0
 8003d66:	4608      	mov	r0, r1
 8003d68:	4611      	mov	r1, r2
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	602a      	str	r2, [r5, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f7fc fe71 	bl	8000a56 <_read>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d102      	bne.n	8003d7e <_read_r+0x1e>
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	b103      	cbz	r3, 8003d7e <_read_r+0x1e>
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	bd38      	pop	{r3, r4, r5, pc}
 8003d80:	20000274 	.word	0x20000274

08003d84 <_write_r>:
 8003d84:	b538      	push	{r3, r4, r5, lr}
 8003d86:	4d07      	ldr	r5, [pc, #28]	@ (8003da4 <_write_r+0x20>)
 8003d88:	4604      	mov	r4, r0
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	2200      	movs	r2, #0
 8003d90:	602a      	str	r2, [r5, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f7fc fe7c 	bl	8000a90 <_write>
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	d102      	bne.n	8003da2 <_write_r+0x1e>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	b103      	cbz	r3, 8003da2 <_write_r+0x1e>
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	bd38      	pop	{r3, r4, r5, pc}
 8003da4:	20000274 	.word	0x20000274

08003da8 <__errno>:
 8003da8:	4b01      	ldr	r3, [pc, #4]	@ (8003db0 <__errno+0x8>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000018 	.word	0x20000018

08003db4 <__libc_init_array>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4d0d      	ldr	r5, [pc, #52]	@ (8003dec <__libc_init_array+0x38>)
 8003db8:	4c0d      	ldr	r4, [pc, #52]	@ (8003df0 <__libc_init_array+0x3c>)
 8003dba:	1b64      	subs	r4, r4, r5
 8003dbc:	10a4      	asrs	r4, r4, #2
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	42a6      	cmp	r6, r4
 8003dc2:	d109      	bne.n	8003dd8 <__libc_init_array+0x24>
 8003dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8003df4 <__libc_init_array+0x40>)
 8003dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8003df8 <__libc_init_array+0x44>)
 8003dc8:	f000 fdb8 	bl	800493c <_init>
 8003dcc:	1b64      	subs	r4, r4, r5
 8003dce:	10a4      	asrs	r4, r4, #2
 8003dd0:	2600      	movs	r6, #0
 8003dd2:	42a6      	cmp	r6, r4
 8003dd4:	d105      	bne.n	8003de2 <__libc_init_array+0x2e>
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ddc:	4798      	blx	r3
 8003dde:	3601      	adds	r6, #1
 8003de0:	e7ee      	b.n	8003dc0 <__libc_init_array+0xc>
 8003de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de6:	4798      	blx	r3
 8003de8:	3601      	adds	r6, #1
 8003dea:	e7f2      	b.n	8003dd2 <__libc_init_array+0x1e>
 8003dec:	08004a00 	.word	0x08004a00
 8003df0:	08004a00 	.word	0x08004a00
 8003df4:	08004a00 	.word	0x08004a00
 8003df8:	08004a04 	.word	0x08004a04

08003dfc <__retarget_lock_init_recursive>:
 8003dfc:	4770      	bx	lr

08003dfe <__retarget_lock_acquire_recursive>:
 8003dfe:	4770      	bx	lr

08003e00 <__retarget_lock_release_recursive>:
 8003e00:	4770      	bx	lr
	...

08003e04 <_free_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4605      	mov	r5, r0
 8003e08:	2900      	cmp	r1, #0
 8003e0a:	d041      	beq.n	8003e90 <_free_r+0x8c>
 8003e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e10:	1f0c      	subs	r4, r1, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bfb8      	it	lt
 8003e16:	18e4      	addlt	r4, r4, r3
 8003e18:	f000 f8e0 	bl	8003fdc <__malloc_lock>
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e94 <_free_r+0x90>)
 8003e1e:	6813      	ldr	r3, [r2, #0]
 8003e20:	b933      	cbnz	r3, 8003e30 <_free_r+0x2c>
 8003e22:	6063      	str	r3, [r4, #4]
 8003e24:	6014      	str	r4, [r2, #0]
 8003e26:	4628      	mov	r0, r5
 8003e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e2c:	f000 b8dc 	b.w	8003fe8 <__malloc_unlock>
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	d908      	bls.n	8003e46 <_free_r+0x42>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	1821      	adds	r1, r4, r0
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	bf01      	itttt	eq
 8003e3c:	6819      	ldreq	r1, [r3, #0]
 8003e3e:	685b      	ldreq	r3, [r3, #4]
 8003e40:	1809      	addeq	r1, r1, r0
 8003e42:	6021      	streq	r1, [r4, #0]
 8003e44:	e7ed      	b.n	8003e22 <_free_r+0x1e>
 8003e46:	461a      	mov	r2, r3
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	b10b      	cbz	r3, 8003e50 <_free_r+0x4c>
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	d9fa      	bls.n	8003e46 <_free_r+0x42>
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	1850      	adds	r0, r2, r1
 8003e54:	42a0      	cmp	r0, r4
 8003e56:	d10b      	bne.n	8003e70 <_free_r+0x6c>
 8003e58:	6820      	ldr	r0, [r4, #0]
 8003e5a:	4401      	add	r1, r0
 8003e5c:	1850      	adds	r0, r2, r1
 8003e5e:	4283      	cmp	r3, r0
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	d1e0      	bne.n	8003e26 <_free_r+0x22>
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	6053      	str	r3, [r2, #4]
 8003e6a:	4408      	add	r0, r1
 8003e6c:	6010      	str	r0, [r2, #0]
 8003e6e:	e7da      	b.n	8003e26 <_free_r+0x22>
 8003e70:	d902      	bls.n	8003e78 <_free_r+0x74>
 8003e72:	230c      	movs	r3, #12
 8003e74:	602b      	str	r3, [r5, #0]
 8003e76:	e7d6      	b.n	8003e26 <_free_r+0x22>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	1821      	adds	r1, r4, r0
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	bf04      	itt	eq
 8003e80:	6819      	ldreq	r1, [r3, #0]
 8003e82:	685b      	ldreq	r3, [r3, #4]
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	bf04      	itt	eq
 8003e88:	1809      	addeq	r1, r1, r0
 8003e8a:	6021      	streq	r1, [r4, #0]
 8003e8c:	6054      	str	r4, [r2, #4]
 8003e8e:	e7ca      	b.n	8003e26 <_free_r+0x22>
 8003e90:	bd38      	pop	{r3, r4, r5, pc}
 8003e92:	bf00      	nop
 8003e94:	20000280 	.word	0x20000280

08003e98 <sbrk_aligned>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ed8 <sbrk_aligned+0x40>)
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	6831      	ldr	r1, [r6, #0]
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	b911      	cbnz	r1, 8003eaa <sbrk_aligned+0x12>
 8003ea4:	f000 fcb6 	bl	8004814 <_sbrk_r>
 8003ea8:	6030      	str	r0, [r6, #0]
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 fcb1 	bl	8004814 <_sbrk_r>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	d103      	bne.n	8003ebe <sbrk_aligned+0x26>
 8003eb6:	f04f 34ff 	mov.w	r4, #4294967295
 8003eba:	4620      	mov	r0, r4
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}
 8003ebe:	1cc4      	adds	r4, r0, #3
 8003ec0:	f024 0403 	bic.w	r4, r4, #3
 8003ec4:	42a0      	cmp	r0, r4
 8003ec6:	d0f8      	beq.n	8003eba <sbrk_aligned+0x22>
 8003ec8:	1a21      	subs	r1, r4, r0
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f000 fca2 	bl	8004814 <_sbrk_r>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d1f2      	bne.n	8003eba <sbrk_aligned+0x22>
 8003ed4:	e7ef      	b.n	8003eb6 <sbrk_aligned+0x1e>
 8003ed6:	bf00      	nop
 8003ed8:	2000027c 	.word	0x2000027c

08003edc <_malloc_r>:
 8003edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee0:	1ccd      	adds	r5, r1, #3
 8003ee2:	f025 0503 	bic.w	r5, r5, #3
 8003ee6:	3508      	adds	r5, #8
 8003ee8:	2d0c      	cmp	r5, #12
 8003eea:	bf38      	it	cc
 8003eec:	250c      	movcc	r5, #12
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	db01      	blt.n	8003ef8 <_malloc_r+0x1c>
 8003ef4:	42a9      	cmp	r1, r5
 8003ef6:	d904      	bls.n	8003f02 <_malloc_r+0x26>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	2000      	movs	r0, #0
 8003efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fd8 <_malloc_r+0xfc>
 8003f06:	f000 f869 	bl	8003fdc <__malloc_lock>
 8003f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f0e:	461c      	mov	r4, r3
 8003f10:	bb44      	cbnz	r4, 8003f64 <_malloc_r+0x88>
 8003f12:	4629      	mov	r1, r5
 8003f14:	4630      	mov	r0, r6
 8003f16:	f7ff ffbf 	bl	8003e98 <sbrk_aligned>
 8003f1a:	1c43      	adds	r3, r0, #1
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	d158      	bne.n	8003fd2 <_malloc_r+0xf6>
 8003f20:	f8d8 4000 	ldr.w	r4, [r8]
 8003f24:	4627      	mov	r7, r4
 8003f26:	2f00      	cmp	r7, #0
 8003f28:	d143      	bne.n	8003fb2 <_malloc_r+0xd6>
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	d04b      	beq.n	8003fc6 <_malloc_r+0xea>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	4639      	mov	r1, r7
 8003f32:	4630      	mov	r0, r6
 8003f34:	eb04 0903 	add.w	r9, r4, r3
 8003f38:	f000 fc6c 	bl	8004814 <_sbrk_r>
 8003f3c:	4581      	cmp	r9, r0
 8003f3e:	d142      	bne.n	8003fc6 <_malloc_r+0xea>
 8003f40:	6821      	ldr	r1, [r4, #0]
 8003f42:	1a6d      	subs	r5, r5, r1
 8003f44:	4629      	mov	r1, r5
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff ffa6 	bl	8003e98 <sbrk_aligned>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d03a      	beq.n	8003fc6 <_malloc_r+0xea>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	442b      	add	r3, r5
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	f8d8 3000 	ldr.w	r3, [r8]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	bb62      	cbnz	r2, 8003fb8 <_malloc_r+0xdc>
 8003f5e:	f8c8 7000 	str.w	r7, [r8]
 8003f62:	e00f      	b.n	8003f84 <_malloc_r+0xa8>
 8003f64:	6822      	ldr	r2, [r4, #0]
 8003f66:	1b52      	subs	r2, r2, r5
 8003f68:	d420      	bmi.n	8003fac <_malloc_r+0xd0>
 8003f6a:	2a0b      	cmp	r2, #11
 8003f6c:	d917      	bls.n	8003f9e <_malloc_r+0xc2>
 8003f6e:	1961      	adds	r1, r4, r5
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	6025      	str	r5, [r4, #0]
 8003f74:	bf18      	it	ne
 8003f76:	6059      	strne	r1, [r3, #4]
 8003f78:	6863      	ldr	r3, [r4, #4]
 8003f7a:	bf08      	it	eq
 8003f7c:	f8c8 1000 	streq.w	r1, [r8]
 8003f80:	5162      	str	r2, [r4, r5]
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	4630      	mov	r0, r6
 8003f86:	f000 f82f 	bl	8003fe8 <__malloc_unlock>
 8003f8a:	f104 000b 	add.w	r0, r4, #11
 8003f8e:	1d23      	adds	r3, r4, #4
 8003f90:	f020 0007 	bic.w	r0, r0, #7
 8003f94:	1ac2      	subs	r2, r0, r3
 8003f96:	bf1c      	itt	ne
 8003f98:	1a1b      	subne	r3, r3, r0
 8003f9a:	50a3      	strne	r3, [r4, r2]
 8003f9c:	e7af      	b.n	8003efe <_malloc_r+0x22>
 8003f9e:	6862      	ldr	r2, [r4, #4]
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	bf0c      	ite	eq
 8003fa4:	f8c8 2000 	streq.w	r2, [r8]
 8003fa8:	605a      	strne	r2, [r3, #4]
 8003faa:	e7eb      	b.n	8003f84 <_malloc_r+0xa8>
 8003fac:	4623      	mov	r3, r4
 8003fae:	6864      	ldr	r4, [r4, #4]
 8003fb0:	e7ae      	b.n	8003f10 <_malloc_r+0x34>
 8003fb2:	463c      	mov	r4, r7
 8003fb4:	687f      	ldr	r7, [r7, #4]
 8003fb6:	e7b6      	b.n	8003f26 <_malloc_r+0x4a>
 8003fb8:	461a      	mov	r2, r3
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	42a3      	cmp	r3, r4
 8003fbe:	d1fb      	bne.n	8003fb8 <_malloc_r+0xdc>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6053      	str	r3, [r2, #4]
 8003fc4:	e7de      	b.n	8003f84 <_malloc_r+0xa8>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	6033      	str	r3, [r6, #0]
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f000 f80c 	bl	8003fe8 <__malloc_unlock>
 8003fd0:	e794      	b.n	8003efc <_malloc_r+0x20>
 8003fd2:	6005      	str	r5, [r0, #0]
 8003fd4:	e7d6      	b.n	8003f84 <_malloc_r+0xa8>
 8003fd6:	bf00      	nop
 8003fd8:	20000280 	.word	0x20000280

08003fdc <__malloc_lock>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	@ (8003fe4 <__malloc_lock+0x8>)
 8003fde:	f7ff bf0e 	b.w	8003dfe <__retarget_lock_acquire_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20000278 	.word	0x20000278

08003fe8 <__malloc_unlock>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	@ (8003ff0 <__malloc_unlock+0x8>)
 8003fea:	f7ff bf09 	b.w	8003e00 <__retarget_lock_release_recursive>
 8003fee:	bf00      	nop
 8003ff0:	20000278 	.word	0x20000278

08003ff4 <__sfputc_r>:
 8003ff4:	6893      	ldr	r3, [r2, #8]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	b410      	push	{r4}
 8003ffc:	6093      	str	r3, [r2, #8]
 8003ffe:	da08      	bge.n	8004012 <__sfputc_r+0x1e>
 8004000:	6994      	ldr	r4, [r2, #24]
 8004002:	42a3      	cmp	r3, r4
 8004004:	db01      	blt.n	800400a <__sfputc_r+0x16>
 8004006:	290a      	cmp	r1, #10
 8004008:	d103      	bne.n	8004012 <__sfputc_r+0x1e>
 800400a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800400e:	f000 bb6d 	b.w	80046ec <__swbuf_r>
 8004012:	6813      	ldr	r3, [r2, #0]
 8004014:	1c58      	adds	r0, r3, #1
 8004016:	6010      	str	r0, [r2, #0]
 8004018:	7019      	strb	r1, [r3, #0]
 800401a:	4608      	mov	r0, r1
 800401c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004020:	4770      	bx	lr

08004022 <__sfputs_r>:
 8004022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004024:	4606      	mov	r6, r0
 8004026:	460f      	mov	r7, r1
 8004028:	4614      	mov	r4, r2
 800402a:	18d5      	adds	r5, r2, r3
 800402c:	42ac      	cmp	r4, r5
 800402e:	d101      	bne.n	8004034 <__sfputs_r+0x12>
 8004030:	2000      	movs	r0, #0
 8004032:	e007      	b.n	8004044 <__sfputs_r+0x22>
 8004034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004038:	463a      	mov	r2, r7
 800403a:	4630      	mov	r0, r6
 800403c:	f7ff ffda 	bl	8003ff4 <__sfputc_r>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d1f3      	bne.n	800402c <__sfputs_r+0xa>
 8004044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004048 <_vfiprintf_r>:
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	460d      	mov	r5, r1
 800404e:	b09d      	sub	sp, #116	@ 0x74
 8004050:	4614      	mov	r4, r2
 8004052:	4698      	mov	r8, r3
 8004054:	4606      	mov	r6, r0
 8004056:	b118      	cbz	r0, 8004060 <_vfiprintf_r+0x18>
 8004058:	6a03      	ldr	r3, [r0, #32]
 800405a:	b90b      	cbnz	r3, 8004060 <_vfiprintf_r+0x18>
 800405c:	f7ff fdca 	bl	8003bf4 <__sinit>
 8004060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004062:	07d9      	lsls	r1, r3, #31
 8004064:	d405      	bmi.n	8004072 <_vfiprintf_r+0x2a>
 8004066:	89ab      	ldrh	r3, [r5, #12]
 8004068:	059a      	lsls	r2, r3, #22
 800406a:	d402      	bmi.n	8004072 <_vfiprintf_r+0x2a>
 800406c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800406e:	f7ff fec6 	bl	8003dfe <__retarget_lock_acquire_recursive>
 8004072:	89ab      	ldrh	r3, [r5, #12]
 8004074:	071b      	lsls	r3, r3, #28
 8004076:	d501      	bpl.n	800407c <_vfiprintf_r+0x34>
 8004078:	692b      	ldr	r3, [r5, #16]
 800407a:	b99b      	cbnz	r3, 80040a4 <_vfiprintf_r+0x5c>
 800407c:	4629      	mov	r1, r5
 800407e:	4630      	mov	r0, r6
 8004080:	f000 fb72 	bl	8004768 <__swsetup_r>
 8004084:	b170      	cbz	r0, 80040a4 <_vfiprintf_r+0x5c>
 8004086:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004088:	07dc      	lsls	r4, r3, #31
 800408a:	d504      	bpl.n	8004096 <_vfiprintf_r+0x4e>
 800408c:	f04f 30ff 	mov.w	r0, #4294967295
 8004090:	b01d      	add	sp, #116	@ 0x74
 8004092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004096:	89ab      	ldrh	r3, [r5, #12]
 8004098:	0598      	lsls	r0, r3, #22
 800409a:	d4f7      	bmi.n	800408c <_vfiprintf_r+0x44>
 800409c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800409e:	f7ff feaf 	bl	8003e00 <__retarget_lock_release_recursive>
 80040a2:	e7f3      	b.n	800408c <_vfiprintf_r+0x44>
 80040a4:	2300      	movs	r3, #0
 80040a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80040a8:	2320      	movs	r3, #32
 80040aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80040b2:	2330      	movs	r3, #48	@ 0x30
 80040b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004264 <_vfiprintf_r+0x21c>
 80040b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040bc:	f04f 0901 	mov.w	r9, #1
 80040c0:	4623      	mov	r3, r4
 80040c2:	469a      	mov	sl, r3
 80040c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040c8:	b10a      	cbz	r2, 80040ce <_vfiprintf_r+0x86>
 80040ca:	2a25      	cmp	r2, #37	@ 0x25
 80040cc:	d1f9      	bne.n	80040c2 <_vfiprintf_r+0x7a>
 80040ce:	ebba 0b04 	subs.w	fp, sl, r4
 80040d2:	d00b      	beq.n	80040ec <_vfiprintf_r+0xa4>
 80040d4:	465b      	mov	r3, fp
 80040d6:	4622      	mov	r2, r4
 80040d8:	4629      	mov	r1, r5
 80040da:	4630      	mov	r0, r6
 80040dc:	f7ff ffa1 	bl	8004022 <__sfputs_r>
 80040e0:	3001      	adds	r0, #1
 80040e2:	f000 80a7 	beq.w	8004234 <_vfiprintf_r+0x1ec>
 80040e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040e8:	445a      	add	r2, fp
 80040ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80040ec:	f89a 3000 	ldrb.w	r3, [sl]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 809f 	beq.w	8004234 <_vfiprintf_r+0x1ec>
 80040f6:	2300      	movs	r3, #0
 80040f8:	f04f 32ff 	mov.w	r2, #4294967295
 80040fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004100:	f10a 0a01 	add.w	sl, sl, #1
 8004104:	9304      	str	r3, [sp, #16]
 8004106:	9307      	str	r3, [sp, #28]
 8004108:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800410c:	931a      	str	r3, [sp, #104]	@ 0x68
 800410e:	4654      	mov	r4, sl
 8004110:	2205      	movs	r2, #5
 8004112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004116:	4853      	ldr	r0, [pc, #332]	@ (8004264 <_vfiprintf_r+0x21c>)
 8004118:	f7fc f85a 	bl	80001d0 <memchr>
 800411c:	9a04      	ldr	r2, [sp, #16]
 800411e:	b9d8      	cbnz	r0, 8004158 <_vfiprintf_r+0x110>
 8004120:	06d1      	lsls	r1, r2, #27
 8004122:	bf44      	itt	mi
 8004124:	2320      	movmi	r3, #32
 8004126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800412a:	0713      	lsls	r3, r2, #28
 800412c:	bf44      	itt	mi
 800412e:	232b      	movmi	r3, #43	@ 0x2b
 8004130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004134:	f89a 3000 	ldrb.w	r3, [sl]
 8004138:	2b2a      	cmp	r3, #42	@ 0x2a
 800413a:	d015      	beq.n	8004168 <_vfiprintf_r+0x120>
 800413c:	9a07      	ldr	r2, [sp, #28]
 800413e:	4654      	mov	r4, sl
 8004140:	2000      	movs	r0, #0
 8004142:	f04f 0c0a 	mov.w	ip, #10
 8004146:	4621      	mov	r1, r4
 8004148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800414c:	3b30      	subs	r3, #48	@ 0x30
 800414e:	2b09      	cmp	r3, #9
 8004150:	d94b      	bls.n	80041ea <_vfiprintf_r+0x1a2>
 8004152:	b1b0      	cbz	r0, 8004182 <_vfiprintf_r+0x13a>
 8004154:	9207      	str	r2, [sp, #28]
 8004156:	e014      	b.n	8004182 <_vfiprintf_r+0x13a>
 8004158:	eba0 0308 	sub.w	r3, r0, r8
 800415c:	fa09 f303 	lsl.w	r3, r9, r3
 8004160:	4313      	orrs	r3, r2
 8004162:	9304      	str	r3, [sp, #16]
 8004164:	46a2      	mov	sl, r4
 8004166:	e7d2      	b.n	800410e <_vfiprintf_r+0xc6>
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	1d19      	adds	r1, r3, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	9103      	str	r1, [sp, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	bfbb      	ittet	lt
 8004174:	425b      	neglt	r3, r3
 8004176:	f042 0202 	orrlt.w	r2, r2, #2
 800417a:	9307      	strge	r3, [sp, #28]
 800417c:	9307      	strlt	r3, [sp, #28]
 800417e:	bfb8      	it	lt
 8004180:	9204      	strlt	r2, [sp, #16]
 8004182:	7823      	ldrb	r3, [r4, #0]
 8004184:	2b2e      	cmp	r3, #46	@ 0x2e
 8004186:	d10a      	bne.n	800419e <_vfiprintf_r+0x156>
 8004188:	7863      	ldrb	r3, [r4, #1]
 800418a:	2b2a      	cmp	r3, #42	@ 0x2a
 800418c:	d132      	bne.n	80041f4 <_vfiprintf_r+0x1ac>
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	1d1a      	adds	r2, r3, #4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	9203      	str	r2, [sp, #12]
 8004196:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800419a:	3402      	adds	r4, #2
 800419c:	9305      	str	r3, [sp, #20]
 800419e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004274 <_vfiprintf_r+0x22c>
 80041a2:	7821      	ldrb	r1, [r4, #0]
 80041a4:	2203      	movs	r2, #3
 80041a6:	4650      	mov	r0, sl
 80041a8:	f7fc f812 	bl	80001d0 <memchr>
 80041ac:	b138      	cbz	r0, 80041be <_vfiprintf_r+0x176>
 80041ae:	9b04      	ldr	r3, [sp, #16]
 80041b0:	eba0 000a 	sub.w	r0, r0, sl
 80041b4:	2240      	movs	r2, #64	@ 0x40
 80041b6:	4082      	lsls	r2, r0
 80041b8:	4313      	orrs	r3, r2
 80041ba:	3401      	adds	r4, #1
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c2:	4829      	ldr	r0, [pc, #164]	@ (8004268 <_vfiprintf_r+0x220>)
 80041c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041c8:	2206      	movs	r2, #6
 80041ca:	f7fc f801 	bl	80001d0 <memchr>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d03f      	beq.n	8004252 <_vfiprintf_r+0x20a>
 80041d2:	4b26      	ldr	r3, [pc, #152]	@ (800426c <_vfiprintf_r+0x224>)
 80041d4:	bb1b      	cbnz	r3, 800421e <_vfiprintf_r+0x1d6>
 80041d6:	9b03      	ldr	r3, [sp, #12]
 80041d8:	3307      	adds	r3, #7
 80041da:	f023 0307 	bic.w	r3, r3, #7
 80041de:	3308      	adds	r3, #8
 80041e0:	9303      	str	r3, [sp, #12]
 80041e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041e4:	443b      	add	r3, r7
 80041e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e8:	e76a      	b.n	80040c0 <_vfiprintf_r+0x78>
 80041ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80041ee:	460c      	mov	r4, r1
 80041f0:	2001      	movs	r0, #1
 80041f2:	e7a8      	b.n	8004146 <_vfiprintf_r+0xfe>
 80041f4:	2300      	movs	r3, #0
 80041f6:	3401      	adds	r4, #1
 80041f8:	9305      	str	r3, [sp, #20]
 80041fa:	4619      	mov	r1, r3
 80041fc:	f04f 0c0a 	mov.w	ip, #10
 8004200:	4620      	mov	r0, r4
 8004202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004206:	3a30      	subs	r2, #48	@ 0x30
 8004208:	2a09      	cmp	r2, #9
 800420a:	d903      	bls.n	8004214 <_vfiprintf_r+0x1cc>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0c6      	beq.n	800419e <_vfiprintf_r+0x156>
 8004210:	9105      	str	r1, [sp, #20]
 8004212:	e7c4      	b.n	800419e <_vfiprintf_r+0x156>
 8004214:	fb0c 2101 	mla	r1, ip, r1, r2
 8004218:	4604      	mov	r4, r0
 800421a:	2301      	movs	r3, #1
 800421c:	e7f0      	b.n	8004200 <_vfiprintf_r+0x1b8>
 800421e:	ab03      	add	r3, sp, #12
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	462a      	mov	r2, r5
 8004224:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <_vfiprintf_r+0x228>)
 8004226:	a904      	add	r1, sp, #16
 8004228:	4630      	mov	r0, r6
 800422a:	f3af 8000 	nop.w
 800422e:	4607      	mov	r7, r0
 8004230:	1c78      	adds	r0, r7, #1
 8004232:	d1d6      	bne.n	80041e2 <_vfiprintf_r+0x19a>
 8004234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004236:	07d9      	lsls	r1, r3, #31
 8004238:	d405      	bmi.n	8004246 <_vfiprintf_r+0x1fe>
 800423a:	89ab      	ldrh	r3, [r5, #12]
 800423c:	059a      	lsls	r2, r3, #22
 800423e:	d402      	bmi.n	8004246 <_vfiprintf_r+0x1fe>
 8004240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004242:	f7ff fddd 	bl	8003e00 <__retarget_lock_release_recursive>
 8004246:	89ab      	ldrh	r3, [r5, #12]
 8004248:	065b      	lsls	r3, r3, #25
 800424a:	f53f af1f 	bmi.w	800408c <_vfiprintf_r+0x44>
 800424e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004250:	e71e      	b.n	8004090 <_vfiprintf_r+0x48>
 8004252:	ab03      	add	r3, sp, #12
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	462a      	mov	r2, r5
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <_vfiprintf_r+0x228>)
 800425a:	a904      	add	r1, sp, #16
 800425c:	4630      	mov	r0, r6
 800425e:	f000 f879 	bl	8004354 <_printf_i>
 8004262:	e7e4      	b.n	800422e <_vfiprintf_r+0x1e6>
 8004264:	080049c4 	.word	0x080049c4
 8004268:	080049ce 	.word	0x080049ce
 800426c:	00000000 	.word	0x00000000
 8004270:	08004023 	.word	0x08004023
 8004274:	080049ca 	.word	0x080049ca

08004278 <_printf_common>:
 8004278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800427c:	4616      	mov	r6, r2
 800427e:	4698      	mov	r8, r3
 8004280:	688a      	ldr	r2, [r1, #8]
 8004282:	690b      	ldr	r3, [r1, #16]
 8004284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004288:	4293      	cmp	r3, r2
 800428a:	bfb8      	it	lt
 800428c:	4613      	movlt	r3, r2
 800428e:	6033      	str	r3, [r6, #0]
 8004290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004294:	4607      	mov	r7, r0
 8004296:	460c      	mov	r4, r1
 8004298:	b10a      	cbz	r2, 800429e <_printf_common+0x26>
 800429a:	3301      	adds	r3, #1
 800429c:	6033      	str	r3, [r6, #0]
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	0699      	lsls	r1, r3, #26
 80042a2:	bf42      	ittt	mi
 80042a4:	6833      	ldrmi	r3, [r6, #0]
 80042a6:	3302      	addmi	r3, #2
 80042a8:	6033      	strmi	r3, [r6, #0]
 80042aa:	6825      	ldr	r5, [r4, #0]
 80042ac:	f015 0506 	ands.w	r5, r5, #6
 80042b0:	d106      	bne.n	80042c0 <_printf_common+0x48>
 80042b2:	f104 0a19 	add.w	sl, r4, #25
 80042b6:	68e3      	ldr	r3, [r4, #12]
 80042b8:	6832      	ldr	r2, [r6, #0]
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	42ab      	cmp	r3, r5
 80042be:	dc26      	bgt.n	800430e <_printf_common+0x96>
 80042c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	3b00      	subs	r3, #0
 80042c8:	bf18      	it	ne
 80042ca:	2301      	movne	r3, #1
 80042cc:	0692      	lsls	r2, r2, #26
 80042ce:	d42b      	bmi.n	8004328 <_printf_common+0xb0>
 80042d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042d4:	4641      	mov	r1, r8
 80042d6:	4638      	mov	r0, r7
 80042d8:	47c8      	blx	r9
 80042da:	3001      	adds	r0, #1
 80042dc:	d01e      	beq.n	800431c <_printf_common+0xa4>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	6922      	ldr	r2, [r4, #16]
 80042e2:	f003 0306 	and.w	r3, r3, #6
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	bf02      	ittt	eq
 80042ea:	68e5      	ldreq	r5, [r4, #12]
 80042ec:	6833      	ldreq	r3, [r6, #0]
 80042ee:	1aed      	subeq	r5, r5, r3
 80042f0:	68a3      	ldr	r3, [r4, #8]
 80042f2:	bf0c      	ite	eq
 80042f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042f8:	2500      	movne	r5, #0
 80042fa:	4293      	cmp	r3, r2
 80042fc:	bfc4      	itt	gt
 80042fe:	1a9b      	subgt	r3, r3, r2
 8004300:	18ed      	addgt	r5, r5, r3
 8004302:	2600      	movs	r6, #0
 8004304:	341a      	adds	r4, #26
 8004306:	42b5      	cmp	r5, r6
 8004308:	d11a      	bne.n	8004340 <_printf_common+0xc8>
 800430a:	2000      	movs	r0, #0
 800430c:	e008      	b.n	8004320 <_printf_common+0xa8>
 800430e:	2301      	movs	r3, #1
 8004310:	4652      	mov	r2, sl
 8004312:	4641      	mov	r1, r8
 8004314:	4638      	mov	r0, r7
 8004316:	47c8      	blx	r9
 8004318:	3001      	adds	r0, #1
 800431a:	d103      	bne.n	8004324 <_printf_common+0xac>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004324:	3501      	adds	r5, #1
 8004326:	e7c6      	b.n	80042b6 <_printf_common+0x3e>
 8004328:	18e1      	adds	r1, r4, r3
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	2030      	movs	r0, #48	@ 0x30
 800432e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004332:	4422      	add	r2, r4
 8004334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800433c:	3302      	adds	r3, #2
 800433e:	e7c7      	b.n	80042d0 <_printf_common+0x58>
 8004340:	2301      	movs	r3, #1
 8004342:	4622      	mov	r2, r4
 8004344:	4641      	mov	r1, r8
 8004346:	4638      	mov	r0, r7
 8004348:	47c8      	blx	r9
 800434a:	3001      	adds	r0, #1
 800434c:	d0e6      	beq.n	800431c <_printf_common+0xa4>
 800434e:	3601      	adds	r6, #1
 8004350:	e7d9      	b.n	8004306 <_printf_common+0x8e>
	...

08004354 <_printf_i>:
 8004354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	7e0f      	ldrb	r7, [r1, #24]
 800435a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800435c:	2f78      	cmp	r7, #120	@ 0x78
 800435e:	4691      	mov	r9, r2
 8004360:	4680      	mov	r8, r0
 8004362:	460c      	mov	r4, r1
 8004364:	469a      	mov	sl, r3
 8004366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800436a:	d807      	bhi.n	800437c <_printf_i+0x28>
 800436c:	2f62      	cmp	r7, #98	@ 0x62
 800436e:	d80a      	bhi.n	8004386 <_printf_i+0x32>
 8004370:	2f00      	cmp	r7, #0
 8004372:	f000 80d2 	beq.w	800451a <_printf_i+0x1c6>
 8004376:	2f58      	cmp	r7, #88	@ 0x58
 8004378:	f000 80b9 	beq.w	80044ee <_printf_i+0x19a>
 800437c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004384:	e03a      	b.n	80043fc <_printf_i+0xa8>
 8004386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800438a:	2b15      	cmp	r3, #21
 800438c:	d8f6      	bhi.n	800437c <_printf_i+0x28>
 800438e:	a101      	add	r1, pc, #4	@ (adr r1, 8004394 <_printf_i+0x40>)
 8004390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004394:	080043ed 	.word	0x080043ed
 8004398:	08004401 	.word	0x08004401
 800439c:	0800437d 	.word	0x0800437d
 80043a0:	0800437d 	.word	0x0800437d
 80043a4:	0800437d 	.word	0x0800437d
 80043a8:	0800437d 	.word	0x0800437d
 80043ac:	08004401 	.word	0x08004401
 80043b0:	0800437d 	.word	0x0800437d
 80043b4:	0800437d 	.word	0x0800437d
 80043b8:	0800437d 	.word	0x0800437d
 80043bc:	0800437d 	.word	0x0800437d
 80043c0:	08004501 	.word	0x08004501
 80043c4:	0800442b 	.word	0x0800442b
 80043c8:	080044bb 	.word	0x080044bb
 80043cc:	0800437d 	.word	0x0800437d
 80043d0:	0800437d 	.word	0x0800437d
 80043d4:	08004523 	.word	0x08004523
 80043d8:	0800437d 	.word	0x0800437d
 80043dc:	0800442b 	.word	0x0800442b
 80043e0:	0800437d 	.word	0x0800437d
 80043e4:	0800437d 	.word	0x0800437d
 80043e8:	080044c3 	.word	0x080044c3
 80043ec:	6833      	ldr	r3, [r6, #0]
 80043ee:	1d1a      	adds	r2, r3, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6032      	str	r2, [r6, #0]
 80043f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043fc:	2301      	movs	r3, #1
 80043fe:	e09d      	b.n	800453c <_printf_i+0x1e8>
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	1d19      	adds	r1, r3, #4
 8004406:	6031      	str	r1, [r6, #0]
 8004408:	0606      	lsls	r6, r0, #24
 800440a:	d501      	bpl.n	8004410 <_printf_i+0xbc>
 800440c:	681d      	ldr	r5, [r3, #0]
 800440e:	e003      	b.n	8004418 <_printf_i+0xc4>
 8004410:	0645      	lsls	r5, r0, #25
 8004412:	d5fb      	bpl.n	800440c <_printf_i+0xb8>
 8004414:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004418:	2d00      	cmp	r5, #0
 800441a:	da03      	bge.n	8004424 <_printf_i+0xd0>
 800441c:	232d      	movs	r3, #45	@ 0x2d
 800441e:	426d      	negs	r5, r5
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004424:	4859      	ldr	r0, [pc, #356]	@ (800458c <_printf_i+0x238>)
 8004426:	230a      	movs	r3, #10
 8004428:	e011      	b.n	800444e <_printf_i+0xfa>
 800442a:	6821      	ldr	r1, [r4, #0]
 800442c:	6833      	ldr	r3, [r6, #0]
 800442e:	0608      	lsls	r0, r1, #24
 8004430:	f853 5b04 	ldr.w	r5, [r3], #4
 8004434:	d402      	bmi.n	800443c <_printf_i+0xe8>
 8004436:	0649      	lsls	r1, r1, #25
 8004438:	bf48      	it	mi
 800443a:	b2ad      	uxthmi	r5, r5
 800443c:	2f6f      	cmp	r7, #111	@ 0x6f
 800443e:	4853      	ldr	r0, [pc, #332]	@ (800458c <_printf_i+0x238>)
 8004440:	6033      	str	r3, [r6, #0]
 8004442:	bf14      	ite	ne
 8004444:	230a      	movne	r3, #10
 8004446:	2308      	moveq	r3, #8
 8004448:	2100      	movs	r1, #0
 800444a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800444e:	6866      	ldr	r6, [r4, #4]
 8004450:	60a6      	str	r6, [r4, #8]
 8004452:	2e00      	cmp	r6, #0
 8004454:	bfa2      	ittt	ge
 8004456:	6821      	ldrge	r1, [r4, #0]
 8004458:	f021 0104 	bicge.w	r1, r1, #4
 800445c:	6021      	strge	r1, [r4, #0]
 800445e:	b90d      	cbnz	r5, 8004464 <_printf_i+0x110>
 8004460:	2e00      	cmp	r6, #0
 8004462:	d04b      	beq.n	80044fc <_printf_i+0x1a8>
 8004464:	4616      	mov	r6, r2
 8004466:	fbb5 f1f3 	udiv	r1, r5, r3
 800446a:	fb03 5711 	mls	r7, r3, r1, r5
 800446e:	5dc7      	ldrb	r7, [r0, r7]
 8004470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004474:	462f      	mov	r7, r5
 8004476:	42bb      	cmp	r3, r7
 8004478:	460d      	mov	r5, r1
 800447a:	d9f4      	bls.n	8004466 <_printf_i+0x112>
 800447c:	2b08      	cmp	r3, #8
 800447e:	d10b      	bne.n	8004498 <_printf_i+0x144>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	07df      	lsls	r7, r3, #31
 8004484:	d508      	bpl.n	8004498 <_printf_i+0x144>
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	6861      	ldr	r1, [r4, #4]
 800448a:	4299      	cmp	r1, r3
 800448c:	bfde      	ittt	le
 800448e:	2330      	movle	r3, #48	@ 0x30
 8004490:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004494:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004498:	1b92      	subs	r2, r2, r6
 800449a:	6122      	str	r2, [r4, #16]
 800449c:	f8cd a000 	str.w	sl, [sp]
 80044a0:	464b      	mov	r3, r9
 80044a2:	aa03      	add	r2, sp, #12
 80044a4:	4621      	mov	r1, r4
 80044a6:	4640      	mov	r0, r8
 80044a8:	f7ff fee6 	bl	8004278 <_printf_common>
 80044ac:	3001      	adds	r0, #1
 80044ae:	d14a      	bne.n	8004546 <_printf_i+0x1f2>
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	b004      	add	sp, #16
 80044b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f043 0320 	orr.w	r3, r3, #32
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	4833      	ldr	r0, [pc, #204]	@ (8004590 <_printf_i+0x23c>)
 80044c4:	2778      	movs	r7, #120	@ 0x78
 80044c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	6831      	ldr	r1, [r6, #0]
 80044ce:	061f      	lsls	r7, r3, #24
 80044d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80044d4:	d402      	bmi.n	80044dc <_printf_i+0x188>
 80044d6:	065f      	lsls	r7, r3, #25
 80044d8:	bf48      	it	mi
 80044da:	b2ad      	uxthmi	r5, r5
 80044dc:	6031      	str	r1, [r6, #0]
 80044de:	07d9      	lsls	r1, r3, #31
 80044e0:	bf44      	itt	mi
 80044e2:	f043 0320 	orrmi.w	r3, r3, #32
 80044e6:	6023      	strmi	r3, [r4, #0]
 80044e8:	b11d      	cbz	r5, 80044f2 <_printf_i+0x19e>
 80044ea:	2310      	movs	r3, #16
 80044ec:	e7ac      	b.n	8004448 <_printf_i+0xf4>
 80044ee:	4827      	ldr	r0, [pc, #156]	@ (800458c <_printf_i+0x238>)
 80044f0:	e7e9      	b.n	80044c6 <_printf_i+0x172>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	f023 0320 	bic.w	r3, r3, #32
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	e7f6      	b.n	80044ea <_printf_i+0x196>
 80044fc:	4616      	mov	r6, r2
 80044fe:	e7bd      	b.n	800447c <_printf_i+0x128>
 8004500:	6833      	ldr	r3, [r6, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	6961      	ldr	r1, [r4, #20]
 8004506:	1d18      	adds	r0, r3, #4
 8004508:	6030      	str	r0, [r6, #0]
 800450a:	062e      	lsls	r6, r5, #24
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	d501      	bpl.n	8004514 <_printf_i+0x1c0>
 8004510:	6019      	str	r1, [r3, #0]
 8004512:	e002      	b.n	800451a <_printf_i+0x1c6>
 8004514:	0668      	lsls	r0, r5, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0x1bc>
 8004518:	8019      	strh	r1, [r3, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	4616      	mov	r6, r2
 8004520:	e7bc      	b.n	800449c <_printf_i+0x148>
 8004522:	6833      	ldr	r3, [r6, #0]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	6032      	str	r2, [r6, #0]
 8004528:	681e      	ldr	r6, [r3, #0]
 800452a:	6862      	ldr	r2, [r4, #4]
 800452c:	2100      	movs	r1, #0
 800452e:	4630      	mov	r0, r6
 8004530:	f7fb fe4e 	bl	80001d0 <memchr>
 8004534:	b108      	cbz	r0, 800453a <_printf_i+0x1e6>
 8004536:	1b80      	subs	r0, r0, r6
 8004538:	6060      	str	r0, [r4, #4]
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	2300      	movs	r3, #0
 8004540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004544:	e7aa      	b.n	800449c <_printf_i+0x148>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	4632      	mov	r2, r6
 800454a:	4649      	mov	r1, r9
 800454c:	4640      	mov	r0, r8
 800454e:	47d0      	blx	sl
 8004550:	3001      	adds	r0, #1
 8004552:	d0ad      	beq.n	80044b0 <_printf_i+0x15c>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	079b      	lsls	r3, r3, #30
 8004558:	d413      	bmi.n	8004582 <_printf_i+0x22e>
 800455a:	68e0      	ldr	r0, [r4, #12]
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	4298      	cmp	r0, r3
 8004560:	bfb8      	it	lt
 8004562:	4618      	movlt	r0, r3
 8004564:	e7a6      	b.n	80044b4 <_printf_i+0x160>
 8004566:	2301      	movs	r3, #1
 8004568:	4632      	mov	r2, r6
 800456a:	4649      	mov	r1, r9
 800456c:	4640      	mov	r0, r8
 800456e:	47d0      	blx	sl
 8004570:	3001      	adds	r0, #1
 8004572:	d09d      	beq.n	80044b0 <_printf_i+0x15c>
 8004574:	3501      	adds	r5, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	9903      	ldr	r1, [sp, #12]
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	42ab      	cmp	r3, r5
 800457e:	dcf2      	bgt.n	8004566 <_printf_i+0x212>
 8004580:	e7eb      	b.n	800455a <_printf_i+0x206>
 8004582:	2500      	movs	r5, #0
 8004584:	f104 0619 	add.w	r6, r4, #25
 8004588:	e7f5      	b.n	8004576 <_printf_i+0x222>
 800458a:	bf00      	nop
 800458c:	080049d5 	.word	0x080049d5
 8004590:	080049e6 	.word	0x080049e6

08004594 <__sflush_r>:
 8004594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	0716      	lsls	r6, r2, #28
 800459e:	4605      	mov	r5, r0
 80045a0:	460c      	mov	r4, r1
 80045a2:	d454      	bmi.n	800464e <__sflush_r+0xba>
 80045a4:	684b      	ldr	r3, [r1, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	dc02      	bgt.n	80045b0 <__sflush_r+0x1c>
 80045aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dd48      	ble.n	8004642 <__sflush_r+0xae>
 80045b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	d045      	beq.n	8004642 <__sflush_r+0xae>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045bc:	682f      	ldr	r7, [r5, #0]
 80045be:	6a21      	ldr	r1, [r4, #32]
 80045c0:	602b      	str	r3, [r5, #0]
 80045c2:	d030      	beq.n	8004626 <__sflush_r+0x92>
 80045c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045c6:	89a3      	ldrh	r3, [r4, #12]
 80045c8:	0759      	lsls	r1, r3, #29
 80045ca:	d505      	bpl.n	80045d8 <__sflush_r+0x44>
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	1ad2      	subs	r2, r2, r3
 80045d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045d2:	b10b      	cbz	r3, 80045d8 <__sflush_r+0x44>
 80045d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045d6:	1ad2      	subs	r2, r2, r3
 80045d8:	2300      	movs	r3, #0
 80045da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045dc:	6a21      	ldr	r1, [r4, #32]
 80045de:	4628      	mov	r0, r5
 80045e0:	47b0      	blx	r6
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	d106      	bne.n	80045f6 <__sflush_r+0x62>
 80045e8:	6829      	ldr	r1, [r5, #0]
 80045ea:	291d      	cmp	r1, #29
 80045ec:	d82b      	bhi.n	8004646 <__sflush_r+0xb2>
 80045ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004698 <__sflush_r+0x104>)
 80045f0:	410a      	asrs	r2, r1
 80045f2:	07d6      	lsls	r6, r2, #31
 80045f4:	d427      	bmi.n	8004646 <__sflush_r+0xb2>
 80045f6:	2200      	movs	r2, #0
 80045f8:	6062      	str	r2, [r4, #4]
 80045fa:	04d9      	lsls	r1, r3, #19
 80045fc:	6922      	ldr	r2, [r4, #16]
 80045fe:	6022      	str	r2, [r4, #0]
 8004600:	d504      	bpl.n	800460c <__sflush_r+0x78>
 8004602:	1c42      	adds	r2, r0, #1
 8004604:	d101      	bne.n	800460a <__sflush_r+0x76>
 8004606:	682b      	ldr	r3, [r5, #0]
 8004608:	b903      	cbnz	r3, 800460c <__sflush_r+0x78>
 800460a:	6560      	str	r0, [r4, #84]	@ 0x54
 800460c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800460e:	602f      	str	r7, [r5, #0]
 8004610:	b1b9      	cbz	r1, 8004642 <__sflush_r+0xae>
 8004612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004616:	4299      	cmp	r1, r3
 8004618:	d002      	beq.n	8004620 <__sflush_r+0x8c>
 800461a:	4628      	mov	r0, r5
 800461c:	f7ff fbf2 	bl	8003e04 <_free_r>
 8004620:	2300      	movs	r3, #0
 8004622:	6363      	str	r3, [r4, #52]	@ 0x34
 8004624:	e00d      	b.n	8004642 <__sflush_r+0xae>
 8004626:	2301      	movs	r3, #1
 8004628:	4628      	mov	r0, r5
 800462a:	47b0      	blx	r6
 800462c:	4602      	mov	r2, r0
 800462e:	1c50      	adds	r0, r2, #1
 8004630:	d1c9      	bne.n	80045c6 <__sflush_r+0x32>
 8004632:	682b      	ldr	r3, [r5, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0c6      	beq.n	80045c6 <__sflush_r+0x32>
 8004638:	2b1d      	cmp	r3, #29
 800463a:	d001      	beq.n	8004640 <__sflush_r+0xac>
 800463c:	2b16      	cmp	r3, #22
 800463e:	d11e      	bne.n	800467e <__sflush_r+0xea>
 8004640:	602f      	str	r7, [r5, #0]
 8004642:	2000      	movs	r0, #0
 8004644:	e022      	b.n	800468c <__sflush_r+0xf8>
 8004646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800464a:	b21b      	sxth	r3, r3
 800464c:	e01b      	b.n	8004686 <__sflush_r+0xf2>
 800464e:	690f      	ldr	r7, [r1, #16]
 8004650:	2f00      	cmp	r7, #0
 8004652:	d0f6      	beq.n	8004642 <__sflush_r+0xae>
 8004654:	0793      	lsls	r3, r2, #30
 8004656:	680e      	ldr	r6, [r1, #0]
 8004658:	bf08      	it	eq
 800465a:	694b      	ldreq	r3, [r1, #20]
 800465c:	600f      	str	r7, [r1, #0]
 800465e:	bf18      	it	ne
 8004660:	2300      	movne	r3, #0
 8004662:	eba6 0807 	sub.w	r8, r6, r7
 8004666:	608b      	str	r3, [r1, #8]
 8004668:	f1b8 0f00 	cmp.w	r8, #0
 800466c:	dde9      	ble.n	8004642 <__sflush_r+0xae>
 800466e:	6a21      	ldr	r1, [r4, #32]
 8004670:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004672:	4643      	mov	r3, r8
 8004674:	463a      	mov	r2, r7
 8004676:	4628      	mov	r0, r5
 8004678:	47b0      	blx	r6
 800467a:	2800      	cmp	r0, #0
 800467c:	dc08      	bgt.n	8004690 <__sflush_r+0xfc>
 800467e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004686:	81a3      	strh	r3, [r4, #12]
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004690:	4407      	add	r7, r0
 8004692:	eba8 0800 	sub.w	r8, r8, r0
 8004696:	e7e7      	b.n	8004668 <__sflush_r+0xd4>
 8004698:	dfbffffe 	.word	0xdfbffffe

0800469c <_fflush_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	690b      	ldr	r3, [r1, #16]
 80046a0:	4605      	mov	r5, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	b913      	cbnz	r3, 80046ac <_fflush_r+0x10>
 80046a6:	2500      	movs	r5, #0
 80046a8:	4628      	mov	r0, r5
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	b118      	cbz	r0, 80046b6 <_fflush_r+0x1a>
 80046ae:	6a03      	ldr	r3, [r0, #32]
 80046b0:	b90b      	cbnz	r3, 80046b6 <_fflush_r+0x1a>
 80046b2:	f7ff fa9f 	bl	8003bf4 <__sinit>
 80046b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f3      	beq.n	80046a6 <_fflush_r+0xa>
 80046be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046c0:	07d0      	lsls	r0, r2, #31
 80046c2:	d404      	bmi.n	80046ce <_fflush_r+0x32>
 80046c4:	0599      	lsls	r1, r3, #22
 80046c6:	d402      	bmi.n	80046ce <_fflush_r+0x32>
 80046c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ca:	f7ff fb98 	bl	8003dfe <__retarget_lock_acquire_recursive>
 80046ce:	4628      	mov	r0, r5
 80046d0:	4621      	mov	r1, r4
 80046d2:	f7ff ff5f 	bl	8004594 <__sflush_r>
 80046d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046d8:	07da      	lsls	r2, r3, #31
 80046da:	4605      	mov	r5, r0
 80046dc:	d4e4      	bmi.n	80046a8 <_fflush_r+0xc>
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	059b      	lsls	r3, r3, #22
 80046e2:	d4e1      	bmi.n	80046a8 <_fflush_r+0xc>
 80046e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046e6:	f7ff fb8b 	bl	8003e00 <__retarget_lock_release_recursive>
 80046ea:	e7dd      	b.n	80046a8 <_fflush_r+0xc>

080046ec <__swbuf_r>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	460e      	mov	r6, r1
 80046f0:	4614      	mov	r4, r2
 80046f2:	4605      	mov	r5, r0
 80046f4:	b118      	cbz	r0, 80046fe <__swbuf_r+0x12>
 80046f6:	6a03      	ldr	r3, [r0, #32]
 80046f8:	b90b      	cbnz	r3, 80046fe <__swbuf_r+0x12>
 80046fa:	f7ff fa7b 	bl	8003bf4 <__sinit>
 80046fe:	69a3      	ldr	r3, [r4, #24]
 8004700:	60a3      	str	r3, [r4, #8]
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	071a      	lsls	r2, r3, #28
 8004706:	d501      	bpl.n	800470c <__swbuf_r+0x20>
 8004708:	6923      	ldr	r3, [r4, #16]
 800470a:	b943      	cbnz	r3, 800471e <__swbuf_r+0x32>
 800470c:	4621      	mov	r1, r4
 800470e:	4628      	mov	r0, r5
 8004710:	f000 f82a 	bl	8004768 <__swsetup_r>
 8004714:	b118      	cbz	r0, 800471e <__swbuf_r+0x32>
 8004716:	f04f 37ff 	mov.w	r7, #4294967295
 800471a:	4638      	mov	r0, r7
 800471c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	6922      	ldr	r2, [r4, #16]
 8004722:	1a98      	subs	r0, r3, r2
 8004724:	6963      	ldr	r3, [r4, #20]
 8004726:	b2f6      	uxtb	r6, r6
 8004728:	4283      	cmp	r3, r0
 800472a:	4637      	mov	r7, r6
 800472c:	dc05      	bgt.n	800473a <__swbuf_r+0x4e>
 800472e:	4621      	mov	r1, r4
 8004730:	4628      	mov	r0, r5
 8004732:	f7ff ffb3 	bl	800469c <_fflush_r>
 8004736:	2800      	cmp	r0, #0
 8004738:	d1ed      	bne.n	8004716 <__swbuf_r+0x2a>
 800473a:	68a3      	ldr	r3, [r4, #8]
 800473c:	3b01      	subs	r3, #1
 800473e:	60a3      	str	r3, [r4, #8]
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	6022      	str	r2, [r4, #0]
 8004746:	701e      	strb	r6, [r3, #0]
 8004748:	6962      	ldr	r2, [r4, #20]
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	429a      	cmp	r2, r3
 800474e:	d004      	beq.n	800475a <__swbuf_r+0x6e>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	07db      	lsls	r3, r3, #31
 8004754:	d5e1      	bpl.n	800471a <__swbuf_r+0x2e>
 8004756:	2e0a      	cmp	r6, #10
 8004758:	d1df      	bne.n	800471a <__swbuf_r+0x2e>
 800475a:	4621      	mov	r1, r4
 800475c:	4628      	mov	r0, r5
 800475e:	f7ff ff9d 	bl	800469c <_fflush_r>
 8004762:	2800      	cmp	r0, #0
 8004764:	d0d9      	beq.n	800471a <__swbuf_r+0x2e>
 8004766:	e7d6      	b.n	8004716 <__swbuf_r+0x2a>

08004768 <__swsetup_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4b29      	ldr	r3, [pc, #164]	@ (8004810 <__swsetup_r+0xa8>)
 800476c:	4605      	mov	r5, r0
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	460c      	mov	r4, r1
 8004772:	b118      	cbz	r0, 800477c <__swsetup_r+0x14>
 8004774:	6a03      	ldr	r3, [r0, #32]
 8004776:	b90b      	cbnz	r3, 800477c <__swsetup_r+0x14>
 8004778:	f7ff fa3c 	bl	8003bf4 <__sinit>
 800477c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004780:	0719      	lsls	r1, r3, #28
 8004782:	d422      	bmi.n	80047ca <__swsetup_r+0x62>
 8004784:	06da      	lsls	r2, r3, #27
 8004786:	d407      	bmi.n	8004798 <__swsetup_r+0x30>
 8004788:	2209      	movs	r2, #9
 800478a:	602a      	str	r2, [r5, #0]
 800478c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	e033      	b.n	8004800 <__swsetup_r+0x98>
 8004798:	0758      	lsls	r0, r3, #29
 800479a:	d512      	bpl.n	80047c2 <__swsetup_r+0x5a>
 800479c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800479e:	b141      	cbz	r1, 80047b2 <__swsetup_r+0x4a>
 80047a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047a4:	4299      	cmp	r1, r3
 80047a6:	d002      	beq.n	80047ae <__swsetup_r+0x46>
 80047a8:	4628      	mov	r0, r5
 80047aa:	f7ff fb2b 	bl	8003e04 <_free_r>
 80047ae:	2300      	movs	r3, #0
 80047b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	2300      	movs	r3, #0
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	f043 0308 	orr.w	r3, r3, #8
 80047c8:	81a3      	strh	r3, [r4, #12]
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	b94b      	cbnz	r3, 80047e2 <__swsetup_r+0x7a>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d8:	d003      	beq.n	80047e2 <__swsetup_r+0x7a>
 80047da:	4621      	mov	r1, r4
 80047dc:	4628      	mov	r0, r5
 80047de:	f000 f84f 	bl	8004880 <__smakebuf_r>
 80047e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e6:	f013 0201 	ands.w	r2, r3, #1
 80047ea:	d00a      	beq.n	8004802 <__swsetup_r+0x9a>
 80047ec:	2200      	movs	r2, #0
 80047ee:	60a2      	str	r2, [r4, #8]
 80047f0:	6962      	ldr	r2, [r4, #20]
 80047f2:	4252      	negs	r2, r2
 80047f4:	61a2      	str	r2, [r4, #24]
 80047f6:	6922      	ldr	r2, [r4, #16]
 80047f8:	b942      	cbnz	r2, 800480c <__swsetup_r+0xa4>
 80047fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80047fe:	d1c5      	bne.n	800478c <__swsetup_r+0x24>
 8004800:	bd38      	pop	{r3, r4, r5, pc}
 8004802:	0799      	lsls	r1, r3, #30
 8004804:	bf58      	it	pl
 8004806:	6962      	ldrpl	r2, [r4, #20]
 8004808:	60a2      	str	r2, [r4, #8]
 800480a:	e7f4      	b.n	80047f6 <__swsetup_r+0x8e>
 800480c:	2000      	movs	r0, #0
 800480e:	e7f7      	b.n	8004800 <__swsetup_r+0x98>
 8004810:	20000018 	.word	0x20000018

08004814 <_sbrk_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4d06      	ldr	r5, [pc, #24]	@ (8004830 <_sbrk_r+0x1c>)
 8004818:	2300      	movs	r3, #0
 800481a:	4604      	mov	r4, r0
 800481c:	4608      	mov	r0, r1
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	f7fc f986 	bl	8000b30 <_sbrk>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d102      	bne.n	800482e <_sbrk_r+0x1a>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	b103      	cbz	r3, 800482e <_sbrk_r+0x1a>
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	20000274 	.word	0x20000274

08004834 <__swhatbuf_r>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	460c      	mov	r4, r1
 8004838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483c:	2900      	cmp	r1, #0
 800483e:	b096      	sub	sp, #88	@ 0x58
 8004840:	4615      	mov	r5, r2
 8004842:	461e      	mov	r6, r3
 8004844:	da0d      	bge.n	8004862 <__swhatbuf_r+0x2e>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	bf14      	ite	ne
 8004852:	2340      	movne	r3, #64	@ 0x40
 8004854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004858:	2000      	movs	r0, #0
 800485a:	6031      	str	r1, [r6, #0]
 800485c:	602b      	str	r3, [r5, #0]
 800485e:	b016      	add	sp, #88	@ 0x58
 8004860:	bd70      	pop	{r4, r5, r6, pc}
 8004862:	466a      	mov	r2, sp
 8004864:	f000 f848 	bl	80048f8 <_fstat_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	dbec      	blt.n	8004846 <__swhatbuf_r+0x12>
 800486c:	9901      	ldr	r1, [sp, #4]
 800486e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004876:	4259      	negs	r1, r3
 8004878:	4159      	adcs	r1, r3
 800487a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800487e:	e7eb      	b.n	8004858 <__swhatbuf_r+0x24>

08004880 <__smakebuf_r>:
 8004880:	898b      	ldrh	r3, [r1, #12]
 8004882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004884:	079d      	lsls	r5, r3, #30
 8004886:	4606      	mov	r6, r0
 8004888:	460c      	mov	r4, r1
 800488a:	d507      	bpl.n	800489c <__smakebuf_r+0x1c>
 800488c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	2301      	movs	r3, #1
 8004896:	6163      	str	r3, [r4, #20]
 8004898:	b003      	add	sp, #12
 800489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489c:	ab01      	add	r3, sp, #4
 800489e:	466a      	mov	r2, sp
 80048a0:	f7ff ffc8 	bl	8004834 <__swhatbuf_r>
 80048a4:	9f00      	ldr	r7, [sp, #0]
 80048a6:	4605      	mov	r5, r0
 80048a8:	4639      	mov	r1, r7
 80048aa:	4630      	mov	r0, r6
 80048ac:	f7ff fb16 	bl	8003edc <_malloc_r>
 80048b0:	b948      	cbnz	r0, 80048c6 <__smakebuf_r+0x46>
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	059a      	lsls	r2, r3, #22
 80048b8:	d4ee      	bmi.n	8004898 <__smakebuf_r+0x18>
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	f043 0302 	orr.w	r3, r3, #2
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	e7e2      	b.n	800488c <__smakebuf_r+0xc>
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	6020      	str	r0, [r4, #0]
 80048ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	9b01      	ldr	r3, [sp, #4]
 80048d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048d6:	b15b      	cbz	r3, 80048f0 <__smakebuf_r+0x70>
 80048d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048dc:	4630      	mov	r0, r6
 80048de:	f000 f81d 	bl	800491c <_isatty_r>
 80048e2:	b128      	cbz	r0, 80048f0 <__smakebuf_r+0x70>
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	431d      	orrs	r5, r3
 80048f4:	81a5      	strh	r5, [r4, #12]
 80048f6:	e7cf      	b.n	8004898 <__smakebuf_r+0x18>

080048f8 <_fstat_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4d07      	ldr	r5, [pc, #28]	@ (8004918 <_fstat_r+0x20>)
 80048fc:	2300      	movs	r3, #0
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	f7fc f8eb 	bl	8000ae0 <_fstat>
 800490a:	1c43      	adds	r3, r0, #1
 800490c:	d102      	bne.n	8004914 <_fstat_r+0x1c>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	b103      	cbz	r3, 8004914 <_fstat_r+0x1c>
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	bd38      	pop	{r3, r4, r5, pc}
 8004916:	bf00      	nop
 8004918:	20000274 	.word	0x20000274

0800491c <_isatty_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4d06      	ldr	r5, [pc, #24]	@ (8004938 <_isatty_r+0x1c>)
 8004920:	2300      	movs	r3, #0
 8004922:	4604      	mov	r4, r0
 8004924:	4608      	mov	r0, r1
 8004926:	602b      	str	r3, [r5, #0]
 8004928:	f7fc f8ea 	bl	8000b00 <_isatty>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_isatty_r+0x1a>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_isatty_r+0x1a>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	20000274 	.word	0x20000274

0800493c <_init>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr

08004948 <_fini>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr
